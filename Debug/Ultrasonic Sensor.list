
Ultrasonic Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cf0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002120  08004e80  08004e80  00014e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fa0  08006fa0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08006fa0  08006fa0  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006fa0  08006fa0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fa0  08006fa0  00016fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fa4  08006fa4  00016fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006fa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00000634  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006a0  200006a0  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000d637  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000020d2  00000000  00000000  0002d716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000dc0  00000000  00000000  0002f7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ab3  00000000  00000000  000305a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001df57  00000000  00000000  0003105b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011e9b  00000000  00000000  0004efb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b3971  00000000  00000000  00060e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003fd8  00000000  00000000  001147c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  00118798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004e68 	.word	0x08004e68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08004e68 	.word	0x08004e68

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr
 8000a4c:	0000      	movs	r0, r0
	...

08000a50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a50:	b598      	push	{r3, r4, r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a54:	f000 fe14 	bl	8001680 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a58:	f000 f8be 	bl	8000bd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a5c:	f000 f9ae 	bl	8000dbc <MX_GPIO_Init>
  MX_TIM1_Init();
 8000a60:	f000 f958 	bl	8000d14 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000a64:	f000 f918 	bl	8000c98 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

    HAL_TIM_Base_Start(&htim1);
 8000a68:	4851      	ldr	r0, [pc, #324]	; (8000bb0 <main+0x160>)
 8000a6a:	f003 fa83 	bl	8003f74 <HAL_TIM_Base_Start>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a78:	f001 f904 	bl	8001c84 <HAL_GPIO_WritePin>
    SSD1306_Init();
 8000a7c:	f000 f9fe 	bl	8000e7c <SSD1306_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000a80:	2201      	movs	r2, #1
 8000a82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8a:	f001 f8fb 	bl	8001c84 <HAL_GPIO_WritePin>
	      __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000a8e:	4b48      	ldr	r3, [pc, #288]	; (8000bb0 <main+0x160>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2200      	movs	r2, #0
 8000a94:	625a      	str	r2, [r3, #36]	; 0x24
	      while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8000a96:	bf00      	nop
 8000a98:	4b45      	ldr	r3, [pc, #276]	; (8000bb0 <main+0x160>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a9e:	2b09      	cmp	r3, #9
 8000aa0:	d9fa      	bls.n	8000a98 <main+0x48>
	      HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aac:	f001 f8ea 	bl	8001c84 <HAL_GPIO_WritePin>

	      pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000ab0:	f000 fe40 	bl	8001734 <HAL_GetTick>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	4a3f      	ldr	r2, [pc, #252]	; (8000bb4 <main+0x164>)
 8000ab8:	6013      	str	r3, [r2, #0]
	      // wait for the echo pin to go high
	      while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 8000aba:	bf00      	nop
 8000abc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac4:	f001 f8c6 	bl	8001c54 <HAL_GPIO_ReadPin>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d108      	bne.n	8000ae0 <main+0x90>
 8000ace:	4b39      	ldr	r3, [pc, #228]	; (8000bb4 <main+0x164>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f103 040a 	add.w	r4, r3, #10
 8000ad6:	f000 fe2d 	bl	8001734 <HAL_GetTick>
 8000ada:	4603      	mov	r3, r0
 8000adc:	429c      	cmp	r4, r3
 8000ade:	d8ed      	bhi.n	8000abc <main+0x6c>
	      Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 8000ae0:	4b33      	ldr	r3, [pc, #204]	; (8000bb0 <main+0x160>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae6:	4a34      	ldr	r2, [pc, #208]	; (8000bb8 <main+0x168>)
 8000ae8:	6013      	str	r3, [r2, #0]

	      pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000aea:	f000 fe23 	bl	8001734 <HAL_GetTick>
 8000aee:	4603      	mov	r3, r0
 8000af0:	4a30      	ldr	r2, [pc, #192]	; (8000bb4 <main+0x164>)
 8000af2:	6013      	str	r3, [r2, #0]
	      // wait for the echo pin to go low
	      while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8000af4:	bf00      	nop
 8000af6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000afa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afe:	f001 f8a9 	bl	8001c54 <HAL_GPIO_ReadPin>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d008      	beq.n	8000b1a <main+0xca>
 8000b08:	4b2a      	ldr	r3, [pc, #168]	; (8000bb4 <main+0x164>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8000b10:	f000 fe10 	bl	8001734 <HAL_GetTick>
 8000b14:	4603      	mov	r3, r0
 8000b16:	429c      	cmp	r4, r3
 8000b18:	d8ed      	bhi.n	8000af6 <main+0xa6>
	      Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 8000b1a:	4b25      	ldr	r3, [pc, #148]	; (8000bb0 <main+0x160>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b20:	4a26      	ldr	r2, [pc, #152]	; (8000bbc <main+0x16c>)
 8000b22:	6013      	str	r3, [r2, #0]

	      Distance = (Value2-Value1)* 0.034/2;
 8000b24:	4b25      	ldr	r3, [pc, #148]	; (8000bbc <main+0x16c>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4b23      	ldr	r3, [pc, #140]	; (8000bb8 <main+0x168>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff fce0 	bl	80004f4 <__aeabi_ui2d>
 8000b34:	a31c      	add	r3, pc, #112	; (adr r3, 8000ba8 <main+0x158>)
 8000b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b3a:	f7ff fd55 	bl	80005e8 <__aeabi_dmul>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	460b      	mov	r3, r1
 8000b42:	4610      	mov	r0, r2
 8000b44:	4619      	mov	r1, r3
 8000b46:	f04f 0200 	mov.w	r2, #0
 8000b4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b4e:	f7ff fe75 	bl	800083c <__aeabi_ddiv>
 8000b52:	4602      	mov	r2, r0
 8000b54:	460b      	mov	r3, r1
 8000b56:	4610      	mov	r0, r2
 8000b58:	4619      	mov	r1, r3
 8000b5a:	f7ff ff57 	bl	8000a0c <__aeabi_d2uiz>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <main+0x170>)
 8000b64:	801a      	strh	r2, [r3, #0]

	      SSD1306_GotoXY (0, 0);
 8000b66:	2100      	movs	r1, #0
 8000b68:	2000      	movs	r0, #0
 8000b6a:	f000 faf1 	bl	8001150 <SSD1306_GotoXY>
	      SSD1306_Puts ("Distance:", &Font_11x18, 1);
 8000b6e:	2201      	movs	r2, #1
 8000b70:	4914      	ldr	r1, [pc, #80]	; (8000bc4 <main+0x174>)
 8000b72:	4815      	ldr	r0, [pc, #84]	; (8000bc8 <main+0x178>)
 8000b74:	f000 fb82 	bl	800127c <SSD1306_Puts>
	      sprintf(strCopy,"%d    ", Distance);
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <main+0x170>)
 8000b7a:	881b      	ldrh	r3, [r3, #0]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4913      	ldr	r1, [pc, #76]	; (8000bcc <main+0x17c>)
 8000b80:	4813      	ldr	r0, [pc, #76]	; (8000bd0 <main+0x180>)
 8000b82:	f003 fccd 	bl	8004520 <siprintf>
	      SSD1306_GotoXY (0, 30);
 8000b86:	211e      	movs	r1, #30
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f000 fae1 	bl	8001150 <SSD1306_GotoXY>
	      SSD1306_Puts (strCopy, &Font_16x26, 1);
 8000b8e:	2201      	movs	r2, #1
 8000b90:	4910      	ldr	r1, [pc, #64]	; (8000bd4 <main+0x184>)
 8000b92:	480f      	ldr	r0, [pc, #60]	; (8000bd0 <main+0x180>)
 8000b94:	f000 fb72 	bl	800127c <SSD1306_Puts>
	      SSD1306_UpdateScreen();
 8000b98:	f000 fa34 	bl	8001004 <SSD1306_UpdateScreen>
	      HAL_Delay(50);
 8000b9c:	2032      	movs	r0, #50	; 0x32
 8000b9e:	f000 fdd5 	bl	800174c <HAL_Delay>
	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000ba2:	e76d      	b.n	8000a80 <main+0x30>
 8000ba4:	f3af 8000 	nop.w
 8000ba8:	b020c49c 	.word	0xb020c49c
 8000bac:	3fa16872 	.word	0x3fa16872
 8000bb0:	200000dc 	.word	0x200000dc
 8000bb4:	20000128 	.word	0x20000128
 8000bb8:	2000012c 	.word	0x2000012c
 8000bbc:	20000130 	.word	0x20000130
 8000bc0:	20000134 	.word	0x20000134
 8000bc4:	20000000 	.word	0x20000000
 8000bc8:	08004e80 	.word	0x08004e80
 8000bcc:	08004e8c 	.word	0x08004e8c
 8000bd0:	20000138 	.word	0x20000138
 8000bd4:	20000008 	.word	0x20000008

08000bd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b09e      	sub	sp, #120	; 0x78
 8000bdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bde:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000be2:	2228      	movs	r2, #40	; 0x28
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f003 fcba 	bl	8004560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	223c      	movs	r2, #60	; 0x3c
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f003 fcac 	bl	8004560 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c10:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c12:	2300      	movs	r3, #0
 8000c14:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c16:	2301      	movs	r3, #1
 8000c18:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c1a:	2310      	movs	r3, #16
 8000c1c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c26:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c28:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c2c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c32:	4618      	mov	r0, r3
 8000c34:	f001 fd72 	bl	800271c <HAL_RCC_OscConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000c3e:	f000 f917 	bl	8000e70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c42:	230f      	movs	r3, #15
 8000c44:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c46:	2302      	movs	r3, #2
 8000c48:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c54:	2300      	movs	r3, #0
 8000c56:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c58:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c5c:	2102      	movs	r1, #2
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f002 fd9a 	bl	8003798 <HAL_RCC_ClockConfig>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c6a:	f000 f901 	bl	8000e70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1;
 8000c6e:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8000c72:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f002 ff70 	bl	8003b64 <HAL_RCCEx_PeriphCLKConfig>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000c8a:	f000 f8f1 	bl	8000e70 <Error_Handler>
  }
}
 8000c8e:	bf00      	nop
 8000c90:	3778      	adds	r7, #120	; 0x78
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c9c:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <MX_I2C1_Init+0x74>)
 8000c9e:	4a1c      	ldr	r2, [pc, #112]	; (8000d10 <MX_I2C1_Init+0x78>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <MX_I2C1_Init+0x74>)
 8000ca4:	f240 220b 	movw	r2, #523	; 0x20b
 8000ca8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000caa:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <MX_I2C1_Init+0x74>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cb0:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <MX_I2C1_Init+0x74>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <MX_I2C1_Init+0x74>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <MX_I2C1_Init+0x74>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cc2:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <MX_I2C1_Init+0x74>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cc8:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <MX_I2C1_Init+0x74>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cce:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <MX_I2C1_Init+0x74>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cd4:	480d      	ldr	r0, [pc, #52]	; (8000d0c <MX_I2C1_Init+0x74>)
 8000cd6:	f000 ffed 	bl	8001cb4 <HAL_I2C_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ce0:	f000 f8c6 	bl	8000e70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4809      	ldr	r0, [pc, #36]	; (8000d0c <MX_I2C1_Init+0x74>)
 8000ce8:	f001 fc80 	bl	80025ec <HAL_I2CEx_ConfigAnalogFilter>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000cf2:	f000 f8bd 	bl	8000e70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4804      	ldr	r0, [pc, #16]	; (8000d0c <MX_I2C1_Init+0x74>)
 8000cfa:	f001 fcc2 	bl	8002682 <HAL_I2CEx_ConfigDigitalFilter>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000d04:	f000 f8b4 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000088 	.word	0x20000088
 8000d10:	40005400 	.word	0x40005400

08000d14 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d1a:	f107 0310 	add.w	r3, r7, #16
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d32:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <MX_TIM1_Init+0xa0>)
 8000d34:	4a20      	ldr	r2, [pc, #128]	; (8000db8 <MX_TIM1_Init+0xa4>)
 8000d36:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000d38:	4b1e      	ldr	r3, [pc, #120]	; (8000db4 <MX_TIM1_Init+0xa0>)
 8000d3a:	2247      	movs	r2, #71	; 0x47
 8000d3c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3e:	4b1d      	ldr	r3, [pc, #116]	; (8000db4 <MX_TIM1_Init+0xa0>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d44:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <MX_TIM1_Init+0xa0>)
 8000d46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d4a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d4c:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <MX_TIM1_Init+0xa0>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d52:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <MX_TIM1_Init+0xa0>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d58:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <MX_TIM1_Init+0xa0>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d5e:	4815      	ldr	r0, [pc, #84]	; (8000db4 <MX_TIM1_Init+0xa0>)
 8000d60:	f003 f8b0 	bl	8003ec4 <HAL_TIM_Base_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000d6a:	f000 f881 	bl	8000e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	4619      	mov	r1, r3
 8000d7a:	480e      	ldr	r0, [pc, #56]	; (8000db4 <MX_TIM1_Init+0xa0>)
 8000d7c:	f003 f95c 	bl	8004038 <HAL_TIM_ConfigClockSource>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000d86:	f000 f873 	bl	8000e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4806      	ldr	r0, [pc, #24]	; (8000db4 <MX_TIM1_Init+0xa0>)
 8000d9c:	f003 fb40 	bl	8004420 <HAL_TIMEx_MasterConfigSynchronization>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000da6:	f000 f863 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	3720      	adds	r7, #32
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	200000dc 	.word	0x200000dc
 8000db8:	40012c00 	.word	0x40012c00

08000dbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b088      	sub	sp, #32
 8000dc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc2:	f107 030c 	add.w	r3, r7, #12
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]
 8000dd0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dd2:	4b26      	ldr	r3, [pc, #152]	; (8000e6c <MX_GPIO_Init+0xb0>)
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	4a25      	ldr	r2, [pc, #148]	; (8000e6c <MX_GPIO_Init+0xb0>)
 8000dd8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ddc:	6153      	str	r3, [r2, #20]
 8000dde:	4b23      	ldr	r3, [pc, #140]	; (8000e6c <MX_GPIO_Init+0xb0>)
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dea:	4b20      	ldr	r3, [pc, #128]	; (8000e6c <MX_GPIO_Init+0xb0>)
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	4a1f      	ldr	r2, [pc, #124]	; (8000e6c <MX_GPIO_Init+0xb0>)
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df4:	6153      	str	r3, [r2, #20]
 8000df6:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <MX_GPIO_Init+0xb0>)
 8000df8:	695b      	ldr	r3, [r3, #20]
 8000dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e02:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <MX_GPIO_Init+0xb0>)
 8000e04:	695b      	ldr	r3, [r3, #20]
 8000e06:	4a19      	ldr	r2, [pc, #100]	; (8000e6c <MX_GPIO_Init+0xb0>)
 8000e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e0c:	6153      	str	r3, [r2, #20]
 8000e0e:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <MX_GPIO_Init+0xb0>)
 8000e10:	695b      	ldr	r3, [r3, #20]
 8000e12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e24:	f000 ff2e 	bl	8001c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e36:	f107 030c 	add.w	r3, r7, #12
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e40:	f000 fd8e 	bl	8001960 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e60:	f000 fd7e 	bl	8001960 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e64:	bf00      	nop
 8000e66:	3720      	adds	r7, #32
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40021000 	.word	0x40021000

08000e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e74:	b672      	cpsid	i
}
 8000e76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <Error_Handler+0x8>
	...

08000e7c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000e82:	f000 fa21 	bl	80012c8 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000e86:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	2178      	movs	r1, #120	; 0x78
 8000e8e:	485b      	ldr	r0, [pc, #364]	; (8000ffc <SSD1306_Init+0x180>)
 8000e90:	f001 f894 	bl	8001fbc <HAL_I2C_IsDeviceReady>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	e0a9      	b.n	8000ff2 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000e9e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000ea2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ea4:	e002      	b.n	8000eac <SSD1306_Init+0x30>
		p--;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d1f9      	bne.n	8000ea6 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000eb2:	22ae      	movs	r2, #174	; 0xae
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	2078      	movs	r0, #120	; 0x78
 8000eb8:	f000 fa82 	bl	80013c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000ebc:	2220      	movs	r2, #32
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	2078      	movs	r0, #120	; 0x78
 8000ec2:	f000 fa7d 	bl	80013c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000ec6:	2210      	movs	r2, #16
 8000ec8:	2100      	movs	r1, #0
 8000eca:	2078      	movs	r0, #120	; 0x78
 8000ecc:	f000 fa78 	bl	80013c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000ed0:	22b0      	movs	r2, #176	; 0xb0
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	2078      	movs	r0, #120	; 0x78
 8000ed6:	f000 fa73 	bl	80013c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000eda:	22c8      	movs	r2, #200	; 0xc8
 8000edc:	2100      	movs	r1, #0
 8000ede:	2078      	movs	r0, #120	; 0x78
 8000ee0:	f000 fa6e 	bl	80013c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	2078      	movs	r0, #120	; 0x78
 8000eea:	f000 fa69 	bl	80013c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000eee:	2210      	movs	r2, #16
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	2078      	movs	r0, #120	; 0x78
 8000ef4:	f000 fa64 	bl	80013c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000ef8:	2240      	movs	r2, #64	; 0x40
 8000efa:	2100      	movs	r1, #0
 8000efc:	2078      	movs	r0, #120	; 0x78
 8000efe:	f000 fa5f 	bl	80013c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000f02:	2281      	movs	r2, #129	; 0x81
 8000f04:	2100      	movs	r1, #0
 8000f06:	2078      	movs	r0, #120	; 0x78
 8000f08:	f000 fa5a 	bl	80013c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000f0c:	22ff      	movs	r2, #255	; 0xff
 8000f0e:	2100      	movs	r1, #0
 8000f10:	2078      	movs	r0, #120	; 0x78
 8000f12:	f000 fa55 	bl	80013c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000f16:	22a1      	movs	r2, #161	; 0xa1
 8000f18:	2100      	movs	r1, #0
 8000f1a:	2078      	movs	r0, #120	; 0x78
 8000f1c:	f000 fa50 	bl	80013c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000f20:	22a6      	movs	r2, #166	; 0xa6
 8000f22:	2100      	movs	r1, #0
 8000f24:	2078      	movs	r0, #120	; 0x78
 8000f26:	f000 fa4b 	bl	80013c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000f2a:	22a8      	movs	r2, #168	; 0xa8
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	2078      	movs	r0, #120	; 0x78
 8000f30:	f000 fa46 	bl	80013c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000f34:	223f      	movs	r2, #63	; 0x3f
 8000f36:	2100      	movs	r1, #0
 8000f38:	2078      	movs	r0, #120	; 0x78
 8000f3a:	f000 fa41 	bl	80013c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000f3e:	22a4      	movs	r2, #164	; 0xa4
 8000f40:	2100      	movs	r1, #0
 8000f42:	2078      	movs	r0, #120	; 0x78
 8000f44:	f000 fa3c 	bl	80013c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000f48:	22d3      	movs	r2, #211	; 0xd3
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	2078      	movs	r0, #120	; 0x78
 8000f4e:	f000 fa37 	bl	80013c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000f52:	2200      	movs	r2, #0
 8000f54:	2100      	movs	r1, #0
 8000f56:	2078      	movs	r0, #120	; 0x78
 8000f58:	f000 fa32 	bl	80013c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000f5c:	22d5      	movs	r2, #213	; 0xd5
 8000f5e:	2100      	movs	r1, #0
 8000f60:	2078      	movs	r0, #120	; 0x78
 8000f62:	f000 fa2d 	bl	80013c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000f66:	22f0      	movs	r2, #240	; 0xf0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	2078      	movs	r0, #120	; 0x78
 8000f6c:	f000 fa28 	bl	80013c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000f70:	22d9      	movs	r2, #217	; 0xd9
 8000f72:	2100      	movs	r1, #0
 8000f74:	2078      	movs	r0, #120	; 0x78
 8000f76:	f000 fa23 	bl	80013c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000f7a:	2222      	movs	r2, #34	; 0x22
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2078      	movs	r0, #120	; 0x78
 8000f80:	f000 fa1e 	bl	80013c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000f84:	22da      	movs	r2, #218	; 0xda
 8000f86:	2100      	movs	r1, #0
 8000f88:	2078      	movs	r0, #120	; 0x78
 8000f8a:	f000 fa19 	bl	80013c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000f8e:	2212      	movs	r2, #18
 8000f90:	2100      	movs	r1, #0
 8000f92:	2078      	movs	r0, #120	; 0x78
 8000f94:	f000 fa14 	bl	80013c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000f98:	22db      	movs	r2, #219	; 0xdb
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	2078      	movs	r0, #120	; 0x78
 8000f9e:	f000 fa0f 	bl	80013c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000fa2:	2220      	movs	r2, #32
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2078      	movs	r0, #120	; 0x78
 8000fa8:	f000 fa0a 	bl	80013c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000fac:	228d      	movs	r2, #141	; 0x8d
 8000fae:	2100      	movs	r1, #0
 8000fb0:	2078      	movs	r0, #120	; 0x78
 8000fb2:	f000 fa05 	bl	80013c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000fb6:	2214      	movs	r2, #20
 8000fb8:	2100      	movs	r1, #0
 8000fba:	2078      	movs	r0, #120	; 0x78
 8000fbc:	f000 fa00 	bl	80013c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000fc0:	22af      	movs	r2, #175	; 0xaf
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	2078      	movs	r0, #120	; 0x78
 8000fc6:	f000 f9fb 	bl	80013c0 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000fca:	222e      	movs	r2, #46	; 0x2e
 8000fcc:	2100      	movs	r1, #0
 8000fce:	2078      	movs	r0, #120	; 0x78
 8000fd0:	f000 f9f6 	bl	80013c0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	f000 f843 	bl	8001060 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000fda:	f000 f813 	bl	8001004 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000fde:	4b08      	ldr	r3, [pc, #32]	; (8001000 <SSD1306_Init+0x184>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <SSD1306_Init+0x184>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000fea:	4b05      	ldr	r3, [pc, #20]	; (8001000 <SSD1306_Init+0x184>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000ff0:	2301      	movs	r3, #1
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000088 	.word	0x20000088
 8001000:	20000548 	.word	0x20000548

08001004 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800100a:	2300      	movs	r3, #0
 800100c:	71fb      	strb	r3, [r7, #7]
 800100e:	e01d      	b.n	800104c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	3b50      	subs	r3, #80	; 0x50
 8001014:	b2db      	uxtb	r3, r3
 8001016:	461a      	mov	r2, r3
 8001018:	2100      	movs	r1, #0
 800101a:	2078      	movs	r0, #120	; 0x78
 800101c:	f000 f9d0 	bl	80013c0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001020:	2200      	movs	r2, #0
 8001022:	2100      	movs	r1, #0
 8001024:	2078      	movs	r0, #120	; 0x78
 8001026:	f000 f9cb 	bl	80013c0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800102a:	2210      	movs	r2, #16
 800102c:	2100      	movs	r1, #0
 800102e:	2078      	movs	r0, #120	; 0x78
 8001030:	f000 f9c6 	bl	80013c0 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	01db      	lsls	r3, r3, #7
 8001038:	4a08      	ldr	r2, [pc, #32]	; (800105c <SSD1306_UpdateScreen+0x58>)
 800103a:	441a      	add	r2, r3
 800103c:	2380      	movs	r3, #128	; 0x80
 800103e:	2140      	movs	r1, #64	; 0x40
 8001040:	2078      	movs	r0, #120	; 0x78
 8001042:	f000 f957 	bl	80012f4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	3301      	adds	r3, #1
 800104a:	71fb      	strb	r3, [r7, #7]
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	2b07      	cmp	r3, #7
 8001050:	d9de      	bls.n	8001010 <SSD1306_UpdateScreen+0xc>
	}
}
 8001052:	bf00      	nop
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000148 	.word	0x20000148

08001060 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d101      	bne.n	8001074 <SSD1306_Fill+0x14>
 8001070:	2300      	movs	r3, #0
 8001072:	e000      	b.n	8001076 <SSD1306_Fill+0x16>
 8001074:	23ff      	movs	r3, #255	; 0xff
 8001076:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800107a:	4619      	mov	r1, r3
 800107c:	4803      	ldr	r0, [pc, #12]	; (800108c <SSD1306_Fill+0x2c>)
 800107e:	f003 fa6f 	bl	8004560 <memset>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000148 	.word	0x20000148

08001090 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	80fb      	strh	r3, [r7, #6]
 800109a:	460b      	mov	r3, r1
 800109c:	80bb      	strh	r3, [r7, #4]
 800109e:	4613      	mov	r3, r2
 80010a0:	70fb      	strb	r3, [r7, #3]
	if (
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	2b7f      	cmp	r3, #127	; 0x7f
 80010a6:	d848      	bhi.n	800113a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80010a8:	88bb      	ldrh	r3, [r7, #4]
 80010aa:	2b3f      	cmp	r3, #63	; 0x3f
 80010ac:	d845      	bhi.n	800113a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80010ae:	4b26      	ldr	r3, [pc, #152]	; (8001148 <SSD1306_DrawPixel+0xb8>)
 80010b0:	791b      	ldrb	r3, [r3, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d006      	beq.n	80010c4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80010b6:	78fb      	ldrb	r3, [r7, #3]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	bf0c      	ite	eq
 80010bc:	2301      	moveq	r3, #1
 80010be:	2300      	movne	r3, #0
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80010c4:	78fb      	ldrb	r3, [r7, #3]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d11a      	bne.n	8001100 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80010ca:	88fa      	ldrh	r2, [r7, #6]
 80010cc:	88bb      	ldrh	r3, [r7, #4]
 80010ce:	08db      	lsrs	r3, r3, #3
 80010d0:	b298      	uxth	r0, r3
 80010d2:	4603      	mov	r3, r0
 80010d4:	01db      	lsls	r3, r3, #7
 80010d6:	4413      	add	r3, r2
 80010d8:	4a1c      	ldr	r2, [pc, #112]	; (800114c <SSD1306_DrawPixel+0xbc>)
 80010da:	5cd3      	ldrb	r3, [r2, r3]
 80010dc:	b25a      	sxtb	r2, r3
 80010de:	88bb      	ldrh	r3, [r7, #4]
 80010e0:	f003 0307 	and.w	r3, r3, #7
 80010e4:	2101      	movs	r1, #1
 80010e6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ea:	b25b      	sxtb	r3, r3
 80010ec:	4313      	orrs	r3, r2
 80010ee:	b259      	sxtb	r1, r3
 80010f0:	88fa      	ldrh	r2, [r7, #6]
 80010f2:	4603      	mov	r3, r0
 80010f4:	01db      	lsls	r3, r3, #7
 80010f6:	4413      	add	r3, r2
 80010f8:	b2c9      	uxtb	r1, r1
 80010fa:	4a14      	ldr	r2, [pc, #80]	; (800114c <SSD1306_DrawPixel+0xbc>)
 80010fc:	54d1      	strb	r1, [r2, r3]
 80010fe:	e01d      	b.n	800113c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001100:	88fa      	ldrh	r2, [r7, #6]
 8001102:	88bb      	ldrh	r3, [r7, #4]
 8001104:	08db      	lsrs	r3, r3, #3
 8001106:	b298      	uxth	r0, r3
 8001108:	4603      	mov	r3, r0
 800110a:	01db      	lsls	r3, r3, #7
 800110c:	4413      	add	r3, r2
 800110e:	4a0f      	ldr	r2, [pc, #60]	; (800114c <SSD1306_DrawPixel+0xbc>)
 8001110:	5cd3      	ldrb	r3, [r2, r3]
 8001112:	b25a      	sxtb	r2, r3
 8001114:	88bb      	ldrh	r3, [r7, #4]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	2101      	movs	r1, #1
 800111c:	fa01 f303 	lsl.w	r3, r1, r3
 8001120:	b25b      	sxtb	r3, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	b25b      	sxtb	r3, r3
 8001126:	4013      	ands	r3, r2
 8001128:	b259      	sxtb	r1, r3
 800112a:	88fa      	ldrh	r2, [r7, #6]
 800112c:	4603      	mov	r3, r0
 800112e:	01db      	lsls	r3, r3, #7
 8001130:	4413      	add	r3, r2
 8001132:	b2c9      	uxtb	r1, r1
 8001134:	4a05      	ldr	r2, [pc, #20]	; (800114c <SSD1306_DrawPixel+0xbc>)
 8001136:	54d1      	strb	r1, [r2, r3]
 8001138:	e000      	b.n	800113c <SSD1306_DrawPixel+0xac>
		return;
 800113a:	bf00      	nop
	}
}
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	20000548 	.word	0x20000548
 800114c:	20000148 	.word	0x20000148

08001150 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	460a      	mov	r2, r1
 800115a:	80fb      	strh	r3, [r7, #6]
 800115c:	4613      	mov	r3, r2
 800115e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001160:	4a05      	ldr	r2, [pc, #20]	; (8001178 <SSD1306_GotoXY+0x28>)
 8001162:	88fb      	ldrh	r3, [r7, #6]
 8001164:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001166:	4a04      	ldr	r2, [pc, #16]	; (8001178 <SSD1306_GotoXY+0x28>)
 8001168:	88bb      	ldrh	r3, [r7, #4]
 800116a:	8053      	strh	r3, [r2, #2]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	20000548 	.word	0x20000548

0800117c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	6039      	str	r1, [r7, #0]
 8001186:	71fb      	strb	r3, [r7, #7]
 8001188:	4613      	mov	r3, r2
 800118a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800118c:	4b3a      	ldr	r3, [pc, #232]	; (8001278 <SSD1306_Putc+0xfc>)
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	461a      	mov	r2, r3
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	4413      	add	r3, r2
	if (
 8001198:	2b7f      	cmp	r3, #127	; 0x7f
 800119a:	dc07      	bgt.n	80011ac <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800119c:	4b36      	ldr	r3, [pc, #216]	; (8001278 <SSD1306_Putc+0xfc>)
 800119e:	885b      	ldrh	r3, [r3, #2]
 80011a0:	461a      	mov	r2, r3
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	785b      	ldrb	r3, [r3, #1]
 80011a6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80011a8:	2b3f      	cmp	r3, #63	; 0x3f
 80011aa:	dd01      	ble.n	80011b0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	e05e      	b.n	800126e <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
 80011b4:	e04b      	b.n	800124e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	3b20      	subs	r3, #32
 80011be:	6839      	ldr	r1, [r7, #0]
 80011c0:	7849      	ldrb	r1, [r1, #1]
 80011c2:	fb01 f303 	mul.w	r3, r1, r3
 80011c6:	4619      	mov	r1, r3
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	440b      	add	r3, r1
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	4413      	add	r3, r2
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80011d4:	2300      	movs	r3, #0
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	e030      	b.n	800123c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d010      	beq.n	800120c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80011ea:	4b23      	ldr	r3, [pc, #140]	; (8001278 <SSD1306_Putc+0xfc>)
 80011ec:	881a      	ldrh	r2, [r3, #0]
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	4413      	add	r3, r2
 80011f4:	b298      	uxth	r0, r3
 80011f6:	4b20      	ldr	r3, [pc, #128]	; (8001278 <SSD1306_Putc+0xfc>)
 80011f8:	885a      	ldrh	r2, [r3, #2]
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	4413      	add	r3, r2
 8001200:	b29b      	uxth	r3, r3
 8001202:	79ba      	ldrb	r2, [r7, #6]
 8001204:	4619      	mov	r1, r3
 8001206:	f7ff ff43 	bl	8001090 <SSD1306_DrawPixel>
 800120a:	e014      	b.n	8001236 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800120c:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <SSD1306_Putc+0xfc>)
 800120e:	881a      	ldrh	r2, [r3, #0]
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	b29b      	uxth	r3, r3
 8001214:	4413      	add	r3, r2
 8001216:	b298      	uxth	r0, r3
 8001218:	4b17      	ldr	r3, [pc, #92]	; (8001278 <SSD1306_Putc+0xfc>)
 800121a:	885a      	ldrh	r2, [r3, #2]
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	b29b      	uxth	r3, r3
 8001220:	4413      	add	r3, r2
 8001222:	b299      	uxth	r1, r3
 8001224:	79bb      	ldrb	r3, [r7, #6]
 8001226:	2b00      	cmp	r3, #0
 8001228:	bf0c      	ite	eq
 800122a:	2301      	moveq	r3, #1
 800122c:	2300      	movne	r3, #0
 800122e:	b2db      	uxtb	r3, r3
 8001230:	461a      	mov	r2, r3
 8001232:	f7ff ff2d 	bl	8001090 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	3301      	adds	r3, #1
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	4293      	cmp	r3, r2
 8001246:	d3c8      	bcc.n	80011da <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	3301      	adds	r3, #1
 800124c:	617b      	str	r3, [r7, #20]
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	785b      	ldrb	r3, [r3, #1]
 8001252:	461a      	mov	r2, r3
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	4293      	cmp	r3, r2
 8001258:	d3ad      	bcc.n	80011b6 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800125a:	4b07      	ldr	r3, [pc, #28]	; (8001278 <SSD1306_Putc+0xfc>)
 800125c:	881a      	ldrh	r2, [r3, #0]
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	b29b      	uxth	r3, r3
 8001264:	4413      	add	r3, r2
 8001266:	b29a      	uxth	r2, r3
 8001268:	4b03      	ldr	r3, [pc, #12]	; (8001278 <SSD1306_Putc+0xfc>)
 800126a:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800126c:	79fb      	ldrb	r3, [r7, #7]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000548 	.word	0x20000548

0800127c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	4613      	mov	r3, r2
 8001288:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800128a:	e012      	b.n	80012b2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	79fa      	ldrb	r2, [r7, #7]
 8001292:	68b9      	ldr	r1, [r7, #8]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff71 	bl	800117c <SSD1306_Putc>
 800129a:	4603      	mov	r3, r0
 800129c:	461a      	mov	r2, r3
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d002      	beq.n	80012ac <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	e008      	b.n	80012be <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	3301      	adds	r3, #1
 80012b0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1e8      	bne.n	800128c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	781b      	ldrb	r3, [r3, #0]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80012ce:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <ssd1306_I2C_Init+0x28>)
 80012d0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80012d2:	e002      	b.n	80012da <ssd1306_I2C_Init+0x12>
		p--;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1f9      	bne.n	80012d4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	0003d090 	.word	0x0003d090

080012f4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b0c7      	sub	sp, #284	; 0x11c
 80012f8:	af02      	add	r7, sp, #8
 80012fa:	4604      	mov	r4, r0
 80012fc:	4608      	mov	r0, r1
 80012fe:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001302:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001306:	600a      	str	r2, [r1, #0]
 8001308:	4619      	mov	r1, r3
 800130a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800130e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001312:	4622      	mov	r2, r4
 8001314:	701a      	strb	r2, [r3, #0]
 8001316:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800131a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800131e:	4602      	mov	r2, r0
 8001320:	701a      	strb	r2, [r3, #0]
 8001322:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001326:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800132a:	460a      	mov	r2, r1
 800132c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800132e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001332:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001336:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800133a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800133e:	7812      	ldrb	r2, [r2, #0]
 8001340:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001342:	2300      	movs	r3, #0
 8001344:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001348:	e015      	b.n	8001376 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800134a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800134e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001352:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001356:	6812      	ldr	r2, [r2, #0]
 8001358:	441a      	add	r2, r3
 800135a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800135e:	3301      	adds	r3, #1
 8001360:	7811      	ldrb	r1, [r2, #0]
 8001362:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001366:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800136a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800136c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001370:	3301      	adds	r3, #1
 8001372:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001376:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800137a:	b29b      	uxth	r3, r3
 800137c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001380:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001384:	8812      	ldrh	r2, [r2, #0]
 8001386:	429a      	cmp	r2, r3
 8001388:	d8df      	bhi.n	800134a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800138a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800138e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	b299      	uxth	r1, r3
 8001396:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800139a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	3301      	adds	r3, #1
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	f107 020c 	add.w	r2, r7, #12
 80013a8:	200a      	movs	r0, #10
 80013aa:	9000      	str	r0, [sp, #0]
 80013ac:	4803      	ldr	r0, [pc, #12]	; (80013bc <ssd1306_I2C_WriteMulti+0xc8>)
 80013ae:	f000 fd11 	bl	8001dd4 <HAL_I2C_Master_Transmit>
}
 80013b2:	bf00      	nop
 80013b4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd90      	pop	{r4, r7, pc}
 80013bc:	20000088 	.word	0x20000088

080013c0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af02      	add	r7, sp, #8
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
 80013ca:	460b      	mov	r3, r1
 80013cc:	71bb      	strb	r3, [r7, #6]
 80013ce:	4613      	mov	r3, r2
 80013d0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80013d2:	79bb      	ldrb	r3, [r7, #6]
 80013d4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80013d6:	797b      	ldrb	r3, [r7, #5]
 80013d8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	b299      	uxth	r1, r3
 80013de:	f107 020c 	add.w	r2, r7, #12
 80013e2:	230a      	movs	r3, #10
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	2302      	movs	r3, #2
 80013e8:	4803      	ldr	r0, [pc, #12]	; (80013f8 <ssd1306_I2C_Write+0x38>)
 80013ea:	f000 fcf3 	bl	8001dd4 <HAL_I2C_Master_Transmit>
}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000088 	.word	0x20000088

080013fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001402:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <HAL_MspInit+0x44>)
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	4a0e      	ldr	r2, [pc, #56]	; (8001440 <HAL_MspInit+0x44>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6193      	str	r3, [r2, #24]
 800140e:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <HAL_MspInit+0x44>)
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <HAL_MspInit+0x44>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	4a08      	ldr	r2, [pc, #32]	; (8001440 <HAL_MspInit+0x44>)
 8001420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001424:	61d3      	str	r3, [r2, #28]
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_MspInit+0x44>)
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142e:	603b      	str	r3, [r7, #0]
 8001430:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	40021000 	.word	0x40021000

08001444 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a26      	ldr	r2, [pc, #152]	; (80014fc <HAL_I2C_MspInit+0xb8>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d145      	bne.n	80014f2 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001466:	4b26      	ldr	r3, [pc, #152]	; (8001500 <HAL_I2C_MspInit+0xbc>)
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	4a25      	ldr	r2, [pc, #148]	; (8001500 <HAL_I2C_MspInit+0xbc>)
 800146c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001470:	6153      	str	r3, [r2, #20]
 8001472:	4b23      	ldr	r3, [pc, #140]	; (8001500 <HAL_I2C_MspInit+0xbc>)
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147e:	4b20      	ldr	r3, [pc, #128]	; (8001500 <HAL_I2C_MspInit+0xbc>)
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	4a1f      	ldr	r2, [pc, #124]	; (8001500 <HAL_I2C_MspInit+0xbc>)
 8001484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001488:	6153      	str	r3, [r2, #20]
 800148a:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <HAL_I2C_MspInit+0xbc>)
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800149a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800149c:	2312      	movs	r3, #18
 800149e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014a4:	2303      	movs	r3, #3
 80014a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014a8:	2304      	movs	r3, #4
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014b6:	f000 fa53 	bl	8001960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014ba:	2380      	movs	r3, #128	; 0x80
 80014bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014be:	2312      	movs	r3, #18
 80014c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014c6:	2303      	movs	r3, #3
 80014c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014ca:	2304      	movs	r3, #4
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	480b      	ldr	r0, [pc, #44]	; (8001504 <HAL_I2C_MspInit+0xc0>)
 80014d6:	f000 fa43 	bl	8001960 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <HAL_I2C_MspInit+0xbc>)
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	4a08      	ldr	r2, [pc, #32]	; (8001500 <HAL_I2C_MspInit+0xbc>)
 80014e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014e4:	61d3      	str	r3, [r2, #28]
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <HAL_I2C_MspInit+0xbc>)
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014f2:	bf00      	nop
 80014f4:	3728      	adds	r7, #40	; 0x28
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40005400 	.word	0x40005400
 8001500:	40021000 	.word	0x40021000
 8001504:	48000400 	.word	0x48000400

08001508 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <HAL_TIM_Base_MspInit+0x38>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d10b      	bne.n	8001532 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800151a:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <HAL_TIM_Base_MspInit+0x3c>)
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	4a09      	ldr	r2, [pc, #36]	; (8001544 <HAL_TIM_Base_MspInit+0x3c>)
 8001520:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001524:	6193      	str	r3, [r2, #24]
 8001526:	4b07      	ldr	r3, [pc, #28]	; (8001544 <HAL_TIM_Base_MspInit+0x3c>)
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001532:	bf00      	nop
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40012c00 	.word	0x40012c00
 8001544:	40021000 	.word	0x40021000

08001548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800154c:	e7fe      	b.n	800154c <NMI_Handler+0x4>

0800154e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <HardFault_Handler+0x4>

08001554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <MemManage_Handler+0x4>

0800155a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800155e:	e7fe      	b.n	800155e <BusFault_Handler+0x4>

08001560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <UsageFault_Handler+0x4>

08001566 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001594:	f000 f8ba 	bl	800170c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}

0800159c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a4:	4a14      	ldr	r2, [pc, #80]	; (80015f8 <_sbrk+0x5c>)
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <_sbrk+0x60>)
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d102      	bne.n	80015be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <_sbrk+0x64>)
 80015ba:	4a12      	ldr	r2, [pc, #72]	; (8001604 <_sbrk+0x68>)
 80015bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <_sbrk+0x64>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d207      	bcs.n	80015dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015cc:	f002 ffd0 	bl	8004570 <__errno>
 80015d0:	4603      	mov	r3, r0
 80015d2:	220c      	movs	r2, #12
 80015d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295
 80015da:	e009      	b.n	80015f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <_sbrk+0x64>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015e2:	4b07      	ldr	r3, [pc, #28]	; (8001600 <_sbrk+0x64>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	4a05      	ldr	r2, [pc, #20]	; (8001600 <_sbrk+0x64>)
 80015ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ee:	68fb      	ldr	r3, [r7, #12]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	2000a000 	.word	0x2000a000
 80015fc:	00000400 	.word	0x00000400
 8001600:	20000550 	.word	0x20000550
 8001604:	200006a0 	.word	0x200006a0

08001608 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <SystemInit+0x20>)
 800160e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001612:	4a05      	ldr	r2, [pc, #20]	; (8001628 <SystemInit+0x20>)
 8001614:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001618:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800162c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001664 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001630:	f7ff ffea 	bl	8001608 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001634:	480c      	ldr	r0, [pc, #48]	; (8001668 <LoopForever+0x6>)
  ldr r1, =_edata
 8001636:	490d      	ldr	r1, [pc, #52]	; (800166c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001638:	4a0d      	ldr	r2, [pc, #52]	; (8001670 <LoopForever+0xe>)
  movs r3, #0
 800163a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800163c:	e002      	b.n	8001644 <LoopCopyDataInit>

0800163e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800163e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001642:	3304      	adds	r3, #4

08001644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001648:	d3f9      	bcc.n	800163e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800164a:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <LoopForever+0x12>)
  ldr r4, =_ebss
 800164c:	4c0a      	ldr	r4, [pc, #40]	; (8001678 <LoopForever+0x16>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001650:	e001      	b.n	8001656 <LoopFillZerobss>

08001652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001654:	3204      	adds	r2, #4

08001656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001658:	d3fb      	bcc.n	8001652 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800165a:	f002 ff8f 	bl	800457c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800165e:	f7ff f9f7 	bl	8000a50 <main>

08001662 <LoopForever>:

LoopForever:
    b LoopForever
 8001662:	e7fe      	b.n	8001662 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001664:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800166c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001670:	08006fa8 	.word	0x08006fa8
  ldr r2, =_sbss
 8001674:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001678:	200006a0 	.word	0x200006a0

0800167c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800167c:	e7fe      	b.n	800167c <ADC1_2_IRQHandler>
	...

08001680 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <HAL_Init+0x28>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a07      	ldr	r2, [pc, #28]	; (80016a8 <HAL_Init+0x28>)
 800168a:	f043 0310 	orr.w	r3, r3, #16
 800168e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001690:	2003      	movs	r0, #3
 8001692:	f000 f931 	bl	80018f8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001696:	200f      	movs	r0, #15
 8001698:	f000 f808 	bl	80016ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800169c:	f7ff feae 	bl	80013fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40022000 	.word	0x40022000

080016ac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_InitTick+0x54>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_InitTick+0x58>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	4619      	mov	r1, r3
 80016be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 f93b 	bl	8001946 <HAL_SYSTICK_Config>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e00e      	b.n	80016f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b0f      	cmp	r3, #15
 80016de:	d80a      	bhi.n	80016f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e0:	2200      	movs	r2, #0
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	f04f 30ff 	mov.w	r0, #4294967295
 80016e8:	f000 f911 	bl	800190e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016ec:	4a06      	ldr	r2, [pc, #24]	; (8001708 <HAL_InitTick+0x5c>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
 80016f4:	e000      	b.n	80016f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000010 	.word	0x20000010
 8001704:	20000018 	.word	0x20000018
 8001708:	20000014 	.word	0x20000014

0800170c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_IncTick+0x20>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	461a      	mov	r2, r3
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_IncTick+0x24>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4413      	add	r3, r2
 800171c:	4a04      	ldr	r2, [pc, #16]	; (8001730 <HAL_IncTick+0x24>)
 800171e:	6013      	str	r3, [r2, #0]
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	20000018 	.word	0x20000018
 8001730:	20000554 	.word	0x20000554

08001734 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return uwTick;  
 8001738:	4b03      	ldr	r3, [pc, #12]	; (8001748 <HAL_GetTick+0x14>)
 800173a:	681b      	ldr	r3, [r3, #0]
}
 800173c:	4618      	mov	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	20000554 	.word	0x20000554

0800174c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001754:	f7ff ffee 	bl	8001734 <HAL_GetTick>
 8001758:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001764:	d005      	beq.n	8001772 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001766:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <HAL_Delay+0x44>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	4413      	add	r3, r2
 8001770:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001772:	bf00      	nop
 8001774:	f7ff ffde 	bl	8001734 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	429a      	cmp	r2, r3
 8001782:	d8f7      	bhi.n	8001774 <HAL_Delay+0x28>
  {
  }
}
 8001784:	bf00      	nop
 8001786:	bf00      	nop
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000018 	.word	0x20000018

08001794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017b0:	4013      	ands	r3, r2
 80017b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c6:	4a04      	ldr	r2, [pc, #16]	; (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	60d3      	str	r3, [r2, #12]
}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <__NVIC_GetPriorityGrouping+0x18>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	0a1b      	lsrs	r3, r3, #8
 80017e6:	f003 0307 	and.w	r3, r3, #7
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001808:	2b00      	cmp	r3, #0
 800180a:	db0a      	blt.n	8001822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	b2da      	uxtb	r2, r3
 8001810:	490c      	ldr	r1, [pc, #48]	; (8001844 <__NVIC_SetPriority+0x4c>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	0112      	lsls	r2, r2, #4
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	440b      	add	r3, r1
 800181c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001820:	e00a      	b.n	8001838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4908      	ldr	r1, [pc, #32]	; (8001848 <__NVIC_SetPriority+0x50>)
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	3b04      	subs	r3, #4
 8001830:	0112      	lsls	r2, r2, #4
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	440b      	add	r3, r1
 8001836:	761a      	strb	r2, [r3, #24]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000e100 	.word	0xe000e100
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800184c:	b480      	push	{r7}
 800184e:	b089      	sub	sp, #36	; 0x24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f1c3 0307 	rsb	r3, r3, #7
 8001866:	2b04      	cmp	r3, #4
 8001868:	bf28      	it	cs
 800186a:	2304      	movcs	r3, #4
 800186c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3304      	adds	r3, #4
 8001872:	2b06      	cmp	r3, #6
 8001874:	d902      	bls.n	800187c <NVIC_EncodePriority+0x30>
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3b03      	subs	r3, #3
 800187a:	e000      	b.n	800187e <NVIC_EncodePriority+0x32>
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001880:	f04f 32ff 	mov.w	r2, #4294967295
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43da      	mvns	r2, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	401a      	ands	r2, r3
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001894:	f04f 31ff 	mov.w	r1, #4294967295
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	fa01 f303 	lsl.w	r3, r1, r3
 800189e:	43d9      	mvns	r1, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	4313      	orrs	r3, r2
         );
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3724      	adds	r7, #36	; 0x24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c4:	d301      	bcc.n	80018ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018c6:	2301      	movs	r3, #1
 80018c8:	e00f      	b.n	80018ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ca:	4a0a      	ldr	r2, [pc, #40]	; (80018f4 <SysTick_Config+0x40>)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018d2:	210f      	movs	r1, #15
 80018d4:	f04f 30ff 	mov.w	r0, #4294967295
 80018d8:	f7ff ff8e 	bl	80017f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <SysTick_Config+0x40>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e2:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <SysTick_Config+0x40>)
 80018e4:	2207      	movs	r2, #7
 80018e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	e000e010 	.word	0xe000e010

080018f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ff47 	bl	8001794 <__NVIC_SetPriorityGrouping>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b086      	sub	sp, #24
 8001912:	af00      	add	r7, sp, #0
 8001914:	4603      	mov	r3, r0
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
 800191a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001920:	f7ff ff5c 	bl	80017dc <__NVIC_GetPriorityGrouping>
 8001924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	68b9      	ldr	r1, [r7, #8]
 800192a:	6978      	ldr	r0, [r7, #20]
 800192c:	f7ff ff8e 	bl	800184c <NVIC_EncodePriority>
 8001930:	4602      	mov	r2, r0
 8001932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001936:	4611      	mov	r1, r2
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff5d 	bl	80017f8 <__NVIC_SetPriority>
}
 800193e:	bf00      	nop
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff ffb0 	bl	80018b4 <SysTick_Config>
 8001954:	4603      	mov	r3, r0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001960:	b480      	push	{r7}
 8001962:	b087      	sub	sp, #28
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800196e:	e154      	b.n	8001c1a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	2101      	movs	r1, #1
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	fa01 f303 	lsl.w	r3, r1, r3
 800197c:	4013      	ands	r3, r2
 800197e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 8146 	beq.w	8001c14 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	2b01      	cmp	r3, #1
 8001992:	d005      	beq.n	80019a0 <HAL_GPIO_Init+0x40>
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d130      	bne.n	8001a02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	2203      	movs	r2, #3
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	68da      	ldr	r2, [r3, #12]
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019d6:	2201      	movs	r2, #1
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43db      	mvns	r3, r3
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4013      	ands	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	091b      	lsrs	r3, r3, #4
 80019ec:	f003 0201 	and.w	r2, r3, #1
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	d017      	beq.n	8001a3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	2203      	movs	r2, #3
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4013      	ands	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	689a      	ldr	r2, [r3, #8]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d123      	bne.n	8001a92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	08da      	lsrs	r2, r3, #3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	3208      	adds	r2, #8
 8001a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	220f      	movs	r2, #15
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43db      	mvns	r3, r3
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	691a      	ldr	r2, [r3, #16]
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	08da      	lsrs	r2, r3, #3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3208      	adds	r2, #8
 8001a8c:	6939      	ldr	r1, [r7, #16]
 8001a8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 0203 	and.w	r2, r3, #3
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 80a0 	beq.w	8001c14 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad4:	4b58      	ldr	r3, [pc, #352]	; (8001c38 <HAL_GPIO_Init+0x2d8>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	4a57      	ldr	r2, [pc, #348]	; (8001c38 <HAL_GPIO_Init+0x2d8>)
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	6193      	str	r3, [r2, #24]
 8001ae0:	4b55      	ldr	r3, [pc, #340]	; (8001c38 <HAL_GPIO_Init+0x2d8>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001aec:	4a53      	ldr	r2, [pc, #332]	; (8001c3c <HAL_GPIO_Init+0x2dc>)
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	089b      	lsrs	r3, r3, #2
 8001af2:	3302      	adds	r3, #2
 8001af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f003 0303 	and.w	r3, r3, #3
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	220f      	movs	r2, #15
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b16:	d019      	beq.n	8001b4c <HAL_GPIO_Init+0x1ec>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a49      	ldr	r2, [pc, #292]	; (8001c40 <HAL_GPIO_Init+0x2e0>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d013      	beq.n	8001b48 <HAL_GPIO_Init+0x1e8>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a48      	ldr	r2, [pc, #288]	; (8001c44 <HAL_GPIO_Init+0x2e4>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d00d      	beq.n	8001b44 <HAL_GPIO_Init+0x1e4>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a47      	ldr	r2, [pc, #284]	; (8001c48 <HAL_GPIO_Init+0x2e8>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d007      	beq.n	8001b40 <HAL_GPIO_Init+0x1e0>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a46      	ldr	r2, [pc, #280]	; (8001c4c <HAL_GPIO_Init+0x2ec>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d101      	bne.n	8001b3c <HAL_GPIO_Init+0x1dc>
 8001b38:	2304      	movs	r3, #4
 8001b3a:	e008      	b.n	8001b4e <HAL_GPIO_Init+0x1ee>
 8001b3c:	2305      	movs	r3, #5
 8001b3e:	e006      	b.n	8001b4e <HAL_GPIO_Init+0x1ee>
 8001b40:	2303      	movs	r3, #3
 8001b42:	e004      	b.n	8001b4e <HAL_GPIO_Init+0x1ee>
 8001b44:	2302      	movs	r3, #2
 8001b46:	e002      	b.n	8001b4e <HAL_GPIO_Init+0x1ee>
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e000      	b.n	8001b4e <HAL_GPIO_Init+0x1ee>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	f002 0203 	and.w	r2, r2, #3
 8001b54:	0092      	lsls	r2, r2, #2
 8001b56:	4093      	lsls	r3, r2
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b5e:	4937      	ldr	r1, [pc, #220]	; (8001c3c <HAL_GPIO_Init+0x2dc>)
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	089b      	lsrs	r3, r3, #2
 8001b64:	3302      	adds	r3, #2
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b6c:	4b38      	ldr	r3, [pc, #224]	; (8001c50 <HAL_GPIO_Init+0x2f0>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	43db      	mvns	r3, r3
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b90:	4a2f      	ldr	r2, [pc, #188]	; (8001c50 <HAL_GPIO_Init+0x2f0>)
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b96:	4b2e      	ldr	r3, [pc, #184]	; (8001c50 <HAL_GPIO_Init+0x2f0>)
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bba:	4a25      	ldr	r2, [pc, #148]	; (8001c50 <HAL_GPIO_Init+0x2f0>)
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bc0:	4b23      	ldr	r3, [pc, #140]	; (8001c50 <HAL_GPIO_Init+0x2f0>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001be4:	4a1a      	ldr	r2, [pc, #104]	; (8001c50 <HAL_GPIO_Init+0x2f0>)
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bea:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <HAL_GPIO_Init+0x2f0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c0e:	4a10      	ldr	r2, [pc, #64]	; (8001c50 <HAL_GPIO_Init+0x2f0>)
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	3301      	adds	r3, #1
 8001c18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	fa22 f303 	lsr.w	r3, r2, r3
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f47f aea3 	bne.w	8001970 <HAL_GPIO_Init+0x10>
  }
}
 8001c2a:	bf00      	nop
 8001c2c:	bf00      	nop
 8001c2e:	371c      	adds	r7, #28
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40010000 	.word	0x40010000
 8001c40:	48000400 	.word	0x48000400
 8001c44:	48000800 	.word	0x48000800
 8001c48:	48000c00 	.word	0x48000c00
 8001c4c:	48001000 	.word	0x48001000
 8001c50:	40010400 	.word	0x40010400

08001c54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691a      	ldr	r2, [r3, #16]
 8001c64:	887b      	ldrh	r3, [r7, #2]
 8001c66:	4013      	ands	r3, r2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d002      	beq.n	8001c72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	73fb      	strb	r3, [r7, #15]
 8001c70:	e001      	b.n	8001c76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c72:	2300      	movs	r3, #0
 8001c74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	807b      	strh	r3, [r7, #2]
 8001c90:	4613      	mov	r3, r2
 8001c92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c94:	787b      	ldrb	r3, [r7, #1]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c9a:	887a      	ldrh	r2, [r7, #2]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ca0:	e002      	b.n	8001ca8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ca2:	887a      	ldrh	r2, [r7, #2]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e081      	b.n	8001dca <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d106      	bne.n	8001ce0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7ff fbb2 	bl	8001444 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2224      	movs	r2, #36	; 0x24
 8001ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 0201 	bic.w	r2, r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d107      	bne.n	8001d2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689a      	ldr	r2, [r3, #8]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	e006      	b.n	8001d3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d104      	bne.n	8001d4e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68da      	ldr	r2, [r3, #12]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691a      	ldr	r2, [r3, #16]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	69d9      	ldr	r1, [r3, #28]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a1a      	ldr	r2, [r3, #32]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 0201 	orr.w	r2, r2, #1
 8001daa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2220      	movs	r2, #32
 8001db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b088      	sub	sp, #32
 8001dd8:	af02      	add	r7, sp, #8
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	607a      	str	r2, [r7, #4]
 8001dde:	461a      	mov	r2, r3
 8001de0:	460b      	mov	r3, r1
 8001de2:	817b      	strh	r3, [r7, #10]
 8001de4:	4613      	mov	r3, r2
 8001de6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b20      	cmp	r3, #32
 8001df2:	f040 80da 	bne.w	8001faa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d101      	bne.n	8001e04 <HAL_I2C_Master_Transmit+0x30>
 8001e00:	2302      	movs	r3, #2
 8001e02:	e0d3      	b.n	8001fac <HAL_I2C_Master_Transmit+0x1d8>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e0c:	f7ff fc92 	bl	8001734 <HAL_GetTick>
 8001e10:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	2319      	movs	r3, #25
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f000 f9f9 	bl	8002216 <I2C_WaitOnFlagUntilTimeout>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e0be      	b.n	8001fac <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2221      	movs	r2, #33	; 0x21
 8001e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2210      	movs	r2, #16
 8001e3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	893a      	ldrh	r2, [r7, #8]
 8001e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	2bff      	cmp	r3, #255	; 0xff
 8001e5e:	d90e      	bls.n	8001e7e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	22ff      	movs	r2, #255	; 0xff
 8001e64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	8979      	ldrh	r1, [r7, #10]
 8001e6e:	4b51      	ldr	r3, [pc, #324]	; (8001fb4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f000 fb86 	bl	8002588 <I2C_TransferConfig>
 8001e7c:	e06c      	b.n	8001f58 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	8979      	ldrh	r1, [r7, #10]
 8001e90:	4b48      	ldr	r3, [pc, #288]	; (8001fb4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f000 fb75 	bl	8002588 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001e9e:	e05b      	b.n	8001f58 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	6a39      	ldr	r1, [r7, #32]
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f000 fa05 	bl	80022b4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e07b      	b.n	8001fac <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	781a      	ldrb	r2, [r3, #0]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	1c5a      	adds	r2, r3, #1
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001edc:	3b01      	subs	r3, #1
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d034      	beq.n	8001f58 <HAL_I2C_Master_Transmit+0x184>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d130      	bne.n	8001f58 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	2200      	movs	r2, #0
 8001efe:	2180      	movs	r1, #128	; 0x80
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f000 f988 	bl	8002216 <I2C_WaitOnFlagUntilTimeout>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e04d      	b.n	8001fac <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	2bff      	cmp	r3, #255	; 0xff
 8001f18:	d90e      	bls.n	8001f38 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	22ff      	movs	r2, #255	; 0xff
 8001f1e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	8979      	ldrh	r1, [r7, #10]
 8001f28:	2300      	movs	r3, #0
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f000 fb29 	bl	8002588 <I2C_TransferConfig>
 8001f36:	e00f      	b.n	8001f58 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	8979      	ldrh	r1, [r7, #10]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f000 fb18 	bl	8002588 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d19e      	bne.n	8001ea0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	6a39      	ldr	r1, [r7, #32]
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 f9eb 	bl	8002342 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e01a      	b.n	8001fac <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6859      	ldr	r1, [r3, #4]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <HAL_I2C_Master_Transmit+0x1e4>)
 8001f8a:	400b      	ands	r3, r1
 8001f8c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2220      	movs	r2, #32
 8001f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e000      	b.n	8001fac <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001faa:	2302      	movs	r3, #2
  }
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	80002000 	.word	0x80002000
 8001fb8:	fe00e800 	.word	0xfe00e800

08001fbc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b08a      	sub	sp, #40	; 0x28
 8001fc0:	af02      	add	r7, sp, #8
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	607a      	str	r2, [r7, #4]
 8001fc6:	603b      	str	r3, [r7, #0]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b20      	cmp	r3, #32
 8001fda:	f040 80f3 	bne.w	80021c4 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fec:	d101      	bne.n	8001ff2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	e0e9      	b.n	80021c6 <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d101      	bne.n	8002000 <HAL_I2C_IsDeviceReady+0x44>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	e0e2      	b.n	80021c6 <HAL_I2C_IsDeviceReady+0x20a>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2224      	movs	r2, #36	; 0x24
 800200c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2200      	movs	r2, #0
 8002014:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d107      	bne.n	800202e <HAL_I2C_IsDeviceReady+0x72>
 800201e:	897b      	ldrh	r3, [r7, #10]
 8002020:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002024:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002028:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800202c:	e006      	b.n	800203c <HAL_I2C_IsDeviceReady+0x80>
 800202e:	897b      	ldrh	r3, [r7, #10]
 8002030:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002034:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002038:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	6812      	ldr	r2, [r2, #0]
 8002040:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002042:	f7ff fb77 	bl	8001734 <HAL_GetTick>
 8002046:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	f003 0320 	and.w	r3, r3, #32
 8002052:	2b20      	cmp	r3, #32
 8002054:	bf0c      	ite	eq
 8002056:	2301      	moveq	r3, #1
 8002058:	2300      	movne	r3, #0
 800205a:	b2db      	uxtb	r3, r3
 800205c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	f003 0310 	and.w	r3, r3, #16
 8002068:	2b10      	cmp	r3, #16
 800206a:	bf0c      	ite	eq
 800206c:	2301      	moveq	r3, #1
 800206e:	2300      	movne	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002074:	e034      	b.n	80020e0 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800207c:	d01a      	beq.n	80020b4 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800207e:	f7ff fb59 	bl	8001734 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	429a      	cmp	r2, r3
 800208c:	d302      	bcc.n	8002094 <HAL_I2C_IsDeviceReady+0xd8>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10f      	bne.n	80020b4 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2220      	movs	r2, #32
 8002098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a0:	f043 0220 	orr.w	r2, r3, #32
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e088      	b.n	80021c6 <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	f003 0320 	and.w	r3, r3, #32
 80020be:	2b20      	cmp	r3, #32
 80020c0:	bf0c      	ite	eq
 80020c2:	2301      	moveq	r3, #1
 80020c4:	2300      	movne	r3, #0
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	f003 0310 	and.w	r3, r3, #16
 80020d4:	2b10      	cmp	r3, #16
 80020d6:	bf0c      	ite	eq
 80020d8:	2301      	moveq	r3, #1
 80020da:	2300      	movne	r3, #0
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80020e0:	7ffb      	ldrb	r3, [r7, #31]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d102      	bne.n	80020ec <HAL_I2C_IsDeviceReady+0x130>
 80020e6:	7fbb      	ldrb	r3, [r7, #30]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0c4      	beq.n	8002076 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	f003 0310 	and.w	r3, r3, #16
 80020f6:	2b10      	cmp	r3, #16
 80020f8:	d01a      	beq.n	8002130 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	2200      	movs	r2, #0
 8002102:	2120      	movs	r1, #32
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f000 f886 	bl	8002216 <I2C_WaitOnFlagUntilTimeout>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e058      	b.n	80021c6 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2220      	movs	r2, #32
 800211a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2220      	movs	r2, #32
 8002120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800212c:	2300      	movs	r3, #0
 800212e:	e04a      	b.n	80021c6 <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	2200      	movs	r2, #0
 8002138:	2120      	movs	r1, #32
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f000 f86b 	bl	8002216 <I2C_WaitOnFlagUntilTimeout>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e03d      	b.n	80021c6 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2210      	movs	r2, #16
 8002150:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2220      	movs	r2, #32
 8002158:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	429a      	cmp	r2, r3
 8002160:	d118      	bne.n	8002194 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002170:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	2200      	movs	r2, #0
 800217a:	2120      	movs	r1, #32
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f000 f84a 	bl	8002216 <I2C_WaitOnFlagUntilTimeout>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e01c      	b.n	80021c6 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2220      	movs	r2, #32
 8002192:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	3301      	adds	r3, #1
 8002198:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	429a      	cmp	r2, r3
 80021a0:	f63f af39 	bhi.w	8002016 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2220      	movs	r2, #32
 80021a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b0:	f043 0220 	orr.w	r2, r3, #32
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e000      	b.n	80021c6 <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 80021c4:	2302      	movs	r3, #2
  }
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3720      	adds	r7, #32
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d103      	bne.n	80021ec <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2200      	movs	r2, #0
 80021ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d007      	beq.n	800220a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	699a      	ldr	r2, [r3, #24]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f042 0201 	orr.w	r2, r2, #1
 8002208:	619a      	str	r2, [r3, #24]
  }
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b084      	sub	sp, #16
 800221a:	af00      	add	r7, sp, #0
 800221c:	60f8      	str	r0, [r7, #12]
 800221e:	60b9      	str	r1, [r7, #8]
 8002220:	603b      	str	r3, [r7, #0]
 8002222:	4613      	mov	r3, r2
 8002224:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002226:	e031      	b.n	800228c <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800222e:	d02d      	beq.n	800228c <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002230:	f7ff fa80 	bl	8001734 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	429a      	cmp	r2, r3
 800223e:	d302      	bcc.n	8002246 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d122      	bne.n	800228c <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	699a      	ldr	r2, [r3, #24]
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	4013      	ands	r3, r2
 8002250:	68ba      	ldr	r2, [r7, #8]
 8002252:	429a      	cmp	r2, r3
 8002254:	bf0c      	ite	eq
 8002256:	2301      	moveq	r3, #1
 8002258:	2300      	movne	r3, #0
 800225a:	b2db      	uxtb	r3, r3
 800225c:	461a      	mov	r2, r3
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	429a      	cmp	r2, r3
 8002262:	d113      	bne.n	800228c <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002268:	f043 0220 	orr.w	r2, r3, #32
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2220      	movs	r2, #32
 8002274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e00f      	b.n	80022ac <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	699a      	ldr	r2, [r3, #24]
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	4013      	ands	r3, r2
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	429a      	cmp	r2, r3
 800229a:	bf0c      	ite	eq
 800229c:	2301      	moveq	r3, #1
 800229e:	2300      	movne	r3, #0
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	461a      	mov	r2, r3
 80022a4:	79fb      	ldrb	r3, [r7, #7]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d0be      	beq.n	8002228 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022c0:	e033      	b.n	800232a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	68b9      	ldr	r1, [r7, #8]
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 f87e 	bl	80023c8 <I2C_IsErrorOccurred>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e031      	b.n	800233a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022dc:	d025      	beq.n	800232a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022de:	f7ff fa29 	bl	8001734 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d302      	bcc.n	80022f4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d11a      	bne.n	800232a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d013      	beq.n	800232a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002306:	f043 0220 	orr.w	r2, r3, #32
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2220      	movs	r2, #32
 8002312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e007      	b.n	800233a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b02      	cmp	r3, #2
 8002336:	d1c4      	bne.n	80022c2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b084      	sub	sp, #16
 8002346:	af00      	add	r7, sp, #0
 8002348:	60f8      	str	r0, [r7, #12]
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800234e:	e02f      	b.n	80023b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	68b9      	ldr	r1, [r7, #8]
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 f837 	bl	80023c8 <I2C_IsErrorOccurred>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e02d      	b.n	80023c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002364:	f7ff f9e6 	bl	8001734 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	429a      	cmp	r2, r3
 8002372:	d302      	bcc.n	800237a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d11a      	bne.n	80023b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	f003 0320 	and.w	r3, r3, #32
 8002384:	2b20      	cmp	r3, #32
 8002386:	d013      	beq.n	80023b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238c:	f043 0220 	orr.w	r2, r3, #32
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2220      	movs	r2, #32
 8002398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e007      	b.n	80023c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	f003 0320 	and.w	r3, r3, #32
 80023ba:	2b20      	cmp	r3, #32
 80023bc:	d1c8      	bne.n	8002350 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08a      	sub	sp, #40	; 0x28
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	f003 0310 	and.w	r3, r3, #16
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d068      	beq.n	80024c6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2210      	movs	r2, #16
 80023fa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023fc:	e049      	b.n	8002492 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002404:	d045      	beq.n	8002492 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002406:	f7ff f995 	bl	8001734 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	429a      	cmp	r2, r3
 8002414:	d302      	bcc.n	800241c <I2C_IsErrorOccurred+0x54>
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d13a      	bne.n	8002492 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002426:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800242e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800243a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800243e:	d121      	bne.n	8002484 <I2C_IsErrorOccurred+0xbc>
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002446:	d01d      	beq.n	8002484 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002448:	7cfb      	ldrb	r3, [r7, #19]
 800244a:	2b20      	cmp	r3, #32
 800244c:	d01a      	beq.n	8002484 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800245c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800245e:	f7ff f969 	bl	8001734 <HAL_GetTick>
 8002462:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002464:	e00e      	b.n	8002484 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002466:	f7ff f965 	bl	8001734 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b19      	cmp	r3, #25
 8002472:	d907      	bls.n	8002484 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002474:	6a3b      	ldr	r3, [r7, #32]
 8002476:	f043 0320 	orr.w	r3, r3, #32
 800247a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002482:	e006      	b.n	8002492 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	f003 0320 	and.w	r3, r3, #32
 800248e:	2b20      	cmp	r3, #32
 8002490:	d1e9      	bne.n	8002466 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	f003 0320 	and.w	r3, r3, #32
 800249c:	2b20      	cmp	r3, #32
 800249e:	d003      	beq.n	80024a8 <I2C_IsErrorOccurred+0xe0>
 80024a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0aa      	beq.n	80023fe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80024a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d103      	bne.n	80024b8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2220      	movs	r2, #32
 80024b6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80024b8:	6a3b      	ldr	r3, [r7, #32]
 80024ba:	f043 0304 	orr.w	r3, r3, #4
 80024be:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00b      	beq.n	80024f0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80024d8:	6a3b      	ldr	r3, [r7, #32]
 80024da:	f043 0301 	orr.w	r3, r3, #1
 80024de:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00b      	beq.n	8002512 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	f043 0308 	orr.w	r3, r3, #8
 8002500:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800250a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00b      	beq.n	8002534 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800251c:	6a3b      	ldr	r3, [r7, #32]
 800251e:	f043 0302 	orr.w	r3, r3, #2
 8002522:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f44f 7200 	mov.w	r2, #512	; 0x200
 800252c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002534:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002538:	2b00      	cmp	r3, #0
 800253a:	d01c      	beq.n	8002576 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f7ff fe46 	bl	80021ce <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6859      	ldr	r1, [r3, #4]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	4b0d      	ldr	r3, [pc, #52]	; (8002584 <I2C_IsErrorOccurred+0x1bc>)
 800254e:	400b      	ands	r3, r1
 8002550:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	431a      	orrs	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2220      	movs	r2, #32
 8002562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002576:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800257a:	4618      	mov	r0, r3
 800257c:	3728      	adds	r7, #40	; 0x28
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	fe00e800 	.word	0xfe00e800

08002588 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002588:	b480      	push	{r7}
 800258a:	b087      	sub	sp, #28
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	607b      	str	r3, [r7, #4]
 8002592:	460b      	mov	r3, r1
 8002594:	817b      	strh	r3, [r7, #10]
 8002596:	4613      	mov	r3, r2
 8002598:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800259a:	897b      	ldrh	r3, [r7, #10]
 800259c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025a0:	7a7b      	ldrb	r3, [r7, #9]
 80025a2:	041b      	lsls	r3, r3, #16
 80025a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025a8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025ae:	6a3b      	ldr	r3, [r7, #32]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025b6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	6a3b      	ldr	r3, [r7, #32]
 80025c0:	0d5b      	lsrs	r3, r3, #21
 80025c2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80025c6:	4b08      	ldr	r3, [pc, #32]	; (80025e8 <I2C_TransferConfig+0x60>)
 80025c8:	430b      	orrs	r3, r1
 80025ca:	43db      	mvns	r3, r3
 80025cc:	ea02 0103 	and.w	r1, r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80025da:	bf00      	nop
 80025dc:	371c      	adds	r7, #28
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	03ff63ff 	.word	0x03ff63ff

080025ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b20      	cmp	r3, #32
 8002600:	d138      	bne.n	8002674 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002608:	2b01      	cmp	r3, #1
 800260a:	d101      	bne.n	8002610 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800260c:	2302      	movs	r3, #2
 800260e:	e032      	b.n	8002676 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2224      	movs	r2, #36	; 0x24
 800261c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0201 	bic.w	r2, r2, #1
 800262e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800263e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6819      	ldr	r1, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0201 	orr.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2220      	movs	r2, #32
 8002664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002670:	2300      	movs	r3, #0
 8002672:	e000      	b.n	8002676 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002674:	2302      	movs	r3, #2
  }
}
 8002676:	4618      	mov	r0, r3
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002682:	b480      	push	{r7}
 8002684:	b085      	sub	sp, #20
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
 800268a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b20      	cmp	r3, #32
 8002696:	d139      	bne.n	800270c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d101      	bne.n	80026a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026a2:	2302      	movs	r3, #2
 80026a4:	e033      	b.n	800270e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2224      	movs	r2, #36	; 0x24
 80026b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0201 	bic.w	r2, r2, #1
 80026c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	021b      	lsls	r3, r3, #8
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	4313      	orrs	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f042 0201 	orr.w	r2, r2, #1
 80026f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2220      	movs	r2, #32
 80026fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002708:	2300      	movs	r3, #0
 800270a:	e000      	b.n	800270e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800270c:	2302      	movs	r3, #2
  }
}
 800270e:	4618      	mov	r0, r3
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
	...

0800271c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002722:	af00      	add	r7, sp, #0
 8002724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002728:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800272c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800272e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002732:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d102      	bne.n	8002742 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	f001 b823 	b.w	8003788 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002746:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 817d 	beq.w	8002a52 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002758:	4bbc      	ldr	r3, [pc, #752]	; (8002a4c <HAL_RCC_OscConfig+0x330>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f003 030c 	and.w	r3, r3, #12
 8002760:	2b04      	cmp	r3, #4
 8002762:	d00c      	beq.n	800277e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002764:	4bb9      	ldr	r3, [pc, #740]	; (8002a4c <HAL_RCC_OscConfig+0x330>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 030c 	and.w	r3, r3, #12
 800276c:	2b08      	cmp	r3, #8
 800276e:	d15c      	bne.n	800282a <HAL_RCC_OscConfig+0x10e>
 8002770:	4bb6      	ldr	r3, [pc, #728]	; (8002a4c <HAL_RCC_OscConfig+0x330>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800277c:	d155      	bne.n	800282a <HAL_RCC_OscConfig+0x10e>
 800277e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002782:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002786:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800278a:	fa93 f3a3 	rbit	r3, r3
 800278e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002792:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002796:	fab3 f383 	clz	r3, r3
 800279a:	b2db      	uxtb	r3, r3
 800279c:	095b      	lsrs	r3, r3, #5
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d102      	bne.n	80027b0 <HAL_RCC_OscConfig+0x94>
 80027aa:	4ba8      	ldr	r3, [pc, #672]	; (8002a4c <HAL_RCC_OscConfig+0x330>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	e015      	b.n	80027dc <HAL_RCC_OscConfig+0xc0>
 80027b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027b4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80027bc:	fa93 f3a3 	rbit	r3, r3
 80027c0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80027c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027c8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80027cc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80027d0:	fa93 f3a3 	rbit	r3, r3
 80027d4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80027d8:	4b9c      	ldr	r3, [pc, #624]	; (8002a4c <HAL_RCC_OscConfig+0x330>)
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027e0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80027e4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80027e8:	fa92 f2a2 	rbit	r2, r2
 80027ec:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80027f0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80027f4:	fab2 f282 	clz	r2, r2
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	f042 0220 	orr.w	r2, r2, #32
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	f002 021f 	and.w	r2, r2, #31
 8002804:	2101      	movs	r1, #1
 8002806:	fa01 f202 	lsl.w	r2, r1, r2
 800280a:	4013      	ands	r3, r2
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 811f 	beq.w	8002a50 <HAL_RCC_OscConfig+0x334>
 8002812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002816:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	f040 8116 	bne.w	8002a50 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	f000 bfaf 	b.w	8003788 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800282a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800283a:	d106      	bne.n	800284a <HAL_RCC_OscConfig+0x12e>
 800283c:	4b83      	ldr	r3, [pc, #524]	; (8002a4c <HAL_RCC_OscConfig+0x330>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a82      	ldr	r2, [pc, #520]	; (8002a4c <HAL_RCC_OscConfig+0x330>)
 8002842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002846:	6013      	str	r3, [r2, #0]
 8002848:	e036      	b.n	80028b8 <HAL_RCC_OscConfig+0x19c>
 800284a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10c      	bne.n	8002874 <HAL_RCC_OscConfig+0x158>
 800285a:	4b7c      	ldr	r3, [pc, #496]	; (8002a4c <HAL_RCC_OscConfig+0x330>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a7b      	ldr	r2, [pc, #492]	; (8002a4c <HAL_RCC_OscConfig+0x330>)
 8002860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	4b79      	ldr	r3, [pc, #484]	; (8002a4c <HAL_RCC_OscConfig+0x330>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a78      	ldr	r2, [pc, #480]	; (8002a4c <HAL_RCC_OscConfig+0x330>)
 800286c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	e021      	b.n	80028b8 <HAL_RCC_OscConfig+0x19c>
 8002874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002878:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002884:	d10c      	bne.n	80028a0 <HAL_RCC_OscConfig+0x184>
 8002886:	4b71      	ldr	r3, [pc, #452]	; (8002a4c <HAL_RCC_OscConfig+0x330>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a70      	ldr	r2, [pc, #448]	; (8002a4c <HAL_RCC_OscConfig+0x330>)
 800288c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	4b6e      	ldr	r3, [pc, #440]	; (8002a4c <HAL_RCC_OscConfig+0x330>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a6d      	ldr	r2, [pc, #436]	; (8002a4c <HAL_RCC_OscConfig+0x330>)
 8002898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	e00b      	b.n	80028b8 <HAL_RCC_OscConfig+0x19c>
 80028a0:	4b6a      	ldr	r3, [pc, #424]	; (8002a4c <HAL_RCC_OscConfig+0x330>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a69      	ldr	r2, [pc, #420]	; (8002a4c <HAL_RCC_OscConfig+0x330>)
 80028a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	4b67      	ldr	r3, [pc, #412]	; (8002a4c <HAL_RCC_OscConfig+0x330>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a66      	ldr	r2, [pc, #408]	; (8002a4c <HAL_RCC_OscConfig+0x330>)
 80028b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028b8:	4b64      	ldr	r3, [pc, #400]	; (8002a4c <HAL_RCC_OscConfig+0x330>)
 80028ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028bc:	f023 020f 	bic.w	r2, r3, #15
 80028c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	495f      	ldr	r1, [pc, #380]	; (8002a4c <HAL_RCC_OscConfig+0x330>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d059      	beq.n	8002996 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e2:	f7fe ff27 	bl	8001734 <HAL_GetTick>
 80028e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ea:	e00a      	b.n	8002902 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028ec:	f7fe ff22 	bl	8001734 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b64      	cmp	r3, #100	; 0x64
 80028fa:	d902      	bls.n	8002902 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	f000 bf43 	b.w	8003788 <HAL_RCC_OscConfig+0x106c>
 8002902:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002906:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800290e:	fa93 f3a3 	rbit	r3, r3
 8002912:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002916:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291a:	fab3 f383 	clz	r3, r3
 800291e:	b2db      	uxtb	r3, r3
 8002920:	095b      	lsrs	r3, r3, #5
 8002922:	b2db      	uxtb	r3, r3
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b01      	cmp	r3, #1
 800292c:	d102      	bne.n	8002934 <HAL_RCC_OscConfig+0x218>
 800292e:	4b47      	ldr	r3, [pc, #284]	; (8002a4c <HAL_RCC_OscConfig+0x330>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	e015      	b.n	8002960 <HAL_RCC_OscConfig+0x244>
 8002934:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002938:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002940:	fa93 f3a3 	rbit	r3, r3
 8002944:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002948:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800294c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002950:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002954:	fa93 f3a3 	rbit	r3, r3
 8002958:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800295c:	4b3b      	ldr	r3, [pc, #236]	; (8002a4c <HAL_RCC_OscConfig+0x330>)
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002964:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002968:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800296c:	fa92 f2a2 	rbit	r2, r2
 8002970:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002974:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002978:	fab2 f282 	clz	r2, r2
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	f042 0220 	orr.w	r2, r2, #32
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	f002 021f 	and.w	r2, r2, #31
 8002988:	2101      	movs	r1, #1
 800298a:	fa01 f202 	lsl.w	r2, r1, r2
 800298e:	4013      	ands	r3, r2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0ab      	beq.n	80028ec <HAL_RCC_OscConfig+0x1d0>
 8002994:	e05d      	b.n	8002a52 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002996:	f7fe fecd 	bl	8001734 <HAL_GetTick>
 800299a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800299e:	e00a      	b.n	80029b6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029a0:	f7fe fec8 	bl	8001734 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b64      	cmp	r3, #100	; 0x64
 80029ae:	d902      	bls.n	80029b6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	f000 bee9 	b.w	8003788 <HAL_RCC_OscConfig+0x106c>
 80029b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029ba:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029be:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80029c2:	fa93 f3a3 	rbit	r3, r3
 80029c6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80029ca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ce:	fab3 f383 	clz	r3, r3
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	095b      	lsrs	r3, r3, #5
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d102      	bne.n	80029e8 <HAL_RCC_OscConfig+0x2cc>
 80029e2:	4b1a      	ldr	r3, [pc, #104]	; (8002a4c <HAL_RCC_OscConfig+0x330>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	e015      	b.n	8002a14 <HAL_RCC_OscConfig+0x2f8>
 80029e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029ec:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80029f4:	fa93 f3a3 	rbit	r3, r3
 80029f8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80029fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a00:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002a04:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002a08:	fa93 f3a3 	rbit	r3, r3
 8002a0c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002a10:	4b0e      	ldr	r3, [pc, #56]	; (8002a4c <HAL_RCC_OscConfig+0x330>)
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a18:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002a1c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002a20:	fa92 f2a2 	rbit	r2, r2
 8002a24:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002a28:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002a2c:	fab2 f282 	clz	r2, r2
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	f042 0220 	orr.w	r2, r2, #32
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	f002 021f 	and.w	r2, r2, #31
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1ab      	bne.n	80029a0 <HAL_RCC_OscConfig+0x284>
 8002a48:	e003      	b.n	8002a52 <HAL_RCC_OscConfig+0x336>
 8002a4a:	bf00      	nop
 8002a4c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 817d 	beq.w	8002d62 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002a68:	4ba6      	ldr	r3, [pc, #664]	; (8002d04 <HAL_RCC_OscConfig+0x5e8>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f003 030c 	and.w	r3, r3, #12
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00b      	beq.n	8002a8c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002a74:	4ba3      	ldr	r3, [pc, #652]	; (8002d04 <HAL_RCC_OscConfig+0x5e8>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 030c 	and.w	r3, r3, #12
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d172      	bne.n	8002b66 <HAL_RCC_OscConfig+0x44a>
 8002a80:	4ba0      	ldr	r3, [pc, #640]	; (8002d04 <HAL_RCC_OscConfig+0x5e8>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d16c      	bne.n	8002b66 <HAL_RCC_OscConfig+0x44a>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a92:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002a96:	fa93 f3a3 	rbit	r3, r3
 8002a9a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002a9e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa2:	fab3 f383 	clz	r3, r3
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	095b      	lsrs	r3, r3, #5
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	f043 0301 	orr.w	r3, r3, #1
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d102      	bne.n	8002abc <HAL_RCC_OscConfig+0x3a0>
 8002ab6:	4b93      	ldr	r3, [pc, #588]	; (8002d04 <HAL_RCC_OscConfig+0x5e8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	e013      	b.n	8002ae4 <HAL_RCC_OscConfig+0x3c8>
 8002abc:	2302      	movs	r3, #2
 8002abe:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002ac6:	fa93 f3a3 	rbit	r3, r3
 8002aca:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002ace:	2302      	movs	r3, #2
 8002ad0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002ad4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ad8:	fa93 f3a3 	rbit	r3, r3
 8002adc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002ae0:	4b88      	ldr	r3, [pc, #544]	; (8002d04 <HAL_RCC_OscConfig+0x5e8>)
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002aea:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002aee:	fa92 f2a2 	rbit	r2, r2
 8002af2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002af6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002afa:	fab2 f282 	clz	r2, r2
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	f042 0220 	orr.w	r2, r2, #32
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	f002 021f 	and.w	r2, r2, #31
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b10:	4013      	ands	r3, r2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00a      	beq.n	8002b2c <HAL_RCC_OscConfig+0x410>
 8002b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d002      	beq.n	8002b2c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	f000 be2e 	b.w	8003788 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b2c:	4b75      	ldr	r3, [pc, #468]	; (8002d04 <HAL_RCC_OscConfig+0x5e8>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	21f8      	movs	r1, #248	; 0xf8
 8002b42:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b46:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002b4a:	fa91 f1a1 	rbit	r1, r1
 8002b4e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002b52:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002b56:	fab1 f181 	clz	r1, r1
 8002b5a:	b2c9      	uxtb	r1, r1
 8002b5c:	408b      	lsls	r3, r1
 8002b5e:	4969      	ldr	r1, [pc, #420]	; (8002d04 <HAL_RCC_OscConfig+0x5e8>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b64:	e0fd      	b.n	8002d62 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 8088 	beq.w	8002c88 <HAL_RCC_OscConfig+0x56c>
 8002b78:	2301      	movs	r3, #1
 8002b7a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002b82:	fa93 f3a3 	rbit	r3, r3
 8002b86:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002b8a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b8e:	fab3 f383 	clz	r3, r3
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba4:	f7fe fdc6 	bl	8001734 <HAL_GetTick>
 8002ba8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bac:	e00a      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bae:	f7fe fdc1 	bl	8001734 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d902      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	f000 bde2 	b.w	8003788 <HAL_RCC_OscConfig+0x106c>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bca:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002bce:	fa93 f3a3 	rbit	r3, r3
 8002bd2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002bd6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bda:	fab3 f383 	clz	r3, r3
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	095b      	lsrs	r3, r3, #5
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	f043 0301 	orr.w	r3, r3, #1
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d102      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x4d8>
 8002bee:	4b45      	ldr	r3, [pc, #276]	; (8002d04 <HAL_RCC_OscConfig+0x5e8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	e013      	b.n	8002c1c <HAL_RCC_OscConfig+0x500>
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002bfe:	fa93 f3a3 	rbit	r3, r3
 8002c02:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002c06:	2302      	movs	r3, #2
 8002c08:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002c0c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002c10:	fa93 f3a3 	rbit	r3, r3
 8002c14:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002c18:	4b3a      	ldr	r3, [pc, #232]	; (8002d04 <HAL_RCC_OscConfig+0x5e8>)
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002c22:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002c26:	fa92 f2a2 	rbit	r2, r2
 8002c2a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002c2e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002c32:	fab2 f282 	clz	r2, r2
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	f042 0220 	orr.w	r2, r2, #32
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	f002 021f 	and.w	r2, r2, #31
 8002c42:	2101      	movs	r1, #1
 8002c44:	fa01 f202 	lsl.w	r2, r1, r2
 8002c48:	4013      	ands	r3, r2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0af      	beq.n	8002bae <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c4e:	4b2d      	ldr	r3, [pc, #180]	; (8002d04 <HAL_RCC_OscConfig+0x5e8>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	21f8      	movs	r1, #248	; 0xf8
 8002c64:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c68:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002c6c:	fa91 f1a1 	rbit	r1, r1
 8002c70:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002c74:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002c78:	fab1 f181 	clz	r1, r1
 8002c7c:	b2c9      	uxtb	r1, r1
 8002c7e:	408b      	lsls	r3, r1
 8002c80:	4920      	ldr	r1, [pc, #128]	; (8002d04 <HAL_RCC_OscConfig+0x5e8>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	600b      	str	r3, [r1, #0]
 8002c86:	e06c      	b.n	8002d62 <HAL_RCC_OscConfig+0x646>
 8002c88:	2301      	movs	r3, #1
 8002c8a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002c92:	fa93 f3a3 	rbit	r3, r3
 8002c96:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002c9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c9e:	fab3 f383 	clz	r3, r3
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ca8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	461a      	mov	r2, r3
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb4:	f7fe fd3e 	bl	8001734 <HAL_GetTick>
 8002cb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cbc:	e00a      	b.n	8002cd4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cbe:	f7fe fd39 	bl	8001734 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d902      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	f000 bd5a 	b.w	8003788 <HAL_RCC_OscConfig+0x106c>
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cda:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002cde:	fa93 f3a3 	rbit	r3, r3
 8002ce2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002ce6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cea:	fab3 f383 	clz	r3, r3
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	095b      	lsrs	r3, r3, #5
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d104      	bne.n	8002d08 <HAL_RCC_OscConfig+0x5ec>
 8002cfe:	4b01      	ldr	r3, [pc, #4]	; (8002d04 <HAL_RCC_OscConfig+0x5e8>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	e015      	b.n	8002d30 <HAL_RCC_OscConfig+0x614>
 8002d04:	40021000 	.word	0x40021000
 8002d08:	2302      	movs	r3, #2
 8002d0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002d12:	fa93 f3a3 	rbit	r3, r3
 8002d16:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002d20:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002d24:	fa93 f3a3 	rbit	r3, r3
 8002d28:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002d2c:	4bc8      	ldr	r3, [pc, #800]	; (8003050 <HAL_RCC_OscConfig+0x934>)
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	2202      	movs	r2, #2
 8002d32:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002d36:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002d3a:	fa92 f2a2 	rbit	r2, r2
 8002d3e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002d42:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002d46:	fab2 f282 	clz	r2, r2
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	f042 0220 	orr.w	r2, r2, #32
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	f002 021f 	and.w	r2, r2, #31
 8002d56:	2101      	movs	r1, #1
 8002d58:	fa01 f202 	lsl.w	r2, r1, r2
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1ad      	bne.n	8002cbe <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 8110 	beq.w	8002f98 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d079      	beq.n	8002e7c <HAL_RCC_OscConfig+0x760>
 8002d88:	2301      	movs	r3, #1
 8002d8a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002d92:	fa93 f3a3 	rbit	r3, r3
 8002d96:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002d9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d9e:	fab3 f383 	clz	r3, r3
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	461a      	mov	r2, r3
 8002da6:	4bab      	ldr	r3, [pc, #684]	; (8003054 <HAL_RCC_OscConfig+0x938>)
 8002da8:	4413      	add	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	461a      	mov	r2, r3
 8002dae:	2301      	movs	r3, #1
 8002db0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db2:	f7fe fcbf 	bl	8001734 <HAL_GetTick>
 8002db6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dba:	e00a      	b.n	8002dd2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dbc:	f7fe fcba 	bl	8001734 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d902      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	f000 bcdb 	b.w	8003788 <HAL_RCC_OscConfig+0x106c>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002ddc:	fa93 f3a3 	rbit	r3, r3
 8002de0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002dec:	2202      	movs	r2, #2
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	fa93 f2a3 	rbit	r2, r3
 8002dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e10:	2202      	movs	r2, #2
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	fa93 f2a3 	rbit	r2, r3
 8002e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e26:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002e2a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e2c:	4b88      	ldr	r3, [pc, #544]	; (8003050 <HAL_RCC_OscConfig+0x934>)
 8002e2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e34:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002e38:	2102      	movs	r1, #2
 8002e3a:	6019      	str	r1, [r3, #0]
 8002e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e40:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	fa93 f1a3 	rbit	r1, r3
 8002e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e4e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002e52:	6019      	str	r1, [r3, #0]
  return result;
 8002e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e58:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	fab3 f383 	clz	r3, r3
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	f003 031f 	and.w	r3, r3, #31
 8002e6e:	2101      	movs	r1, #1
 8002e70:	fa01 f303 	lsl.w	r3, r1, r3
 8002e74:	4013      	ands	r3, r2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0a0      	beq.n	8002dbc <HAL_RCC_OscConfig+0x6a0>
 8002e7a:	e08d      	b.n	8002f98 <HAL_RCC_OscConfig+0x87c>
 8002e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e80:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e84:	2201      	movs	r2, #1
 8002e86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	fa93 f2a3 	rbit	r2, r3
 8002e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e9a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002e9e:	601a      	str	r2, [r3, #0]
  return result;
 8002ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ea8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eaa:	fab3 f383 	clz	r3, r3
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	4b68      	ldr	r3, [pc, #416]	; (8003054 <HAL_RCC_OscConfig+0x938>)
 8002eb4:	4413      	add	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	461a      	mov	r2, r3
 8002eba:	2300      	movs	r3, #0
 8002ebc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ebe:	f7fe fc39 	bl	8001734 <HAL_GetTick>
 8002ec2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec6:	e00a      	b.n	8002ede <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ec8:	f7fe fc34 	bl	8001734 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d902      	bls.n	8002ede <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	f000 bc55 	b.w	8003788 <HAL_RCC_OscConfig+0x106c>
 8002ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	fa93 f2a3 	rbit	r2, r3
 8002ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002efc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f06:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f12:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	fa93 f2a3 	rbit	r2, r3
 8002f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002f2e:	2202      	movs	r2, #2
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	fa93 f2a3 	rbit	r2, r3
 8002f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f44:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002f48:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f4a:	4b41      	ldr	r3, [pc, #260]	; (8003050 <HAL_RCC_OscConfig+0x934>)
 8002f4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f52:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002f56:	2102      	movs	r1, #2
 8002f58:	6019      	str	r1, [r3, #0]
 8002f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	fa93 f1a3 	rbit	r1, r3
 8002f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002f70:	6019      	str	r1, [r3, #0]
  return result;
 8002f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f76:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	fab3 f383 	clz	r3, r3
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	f003 031f 	and.w	r3, r3, #31
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d197      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 81a1 	beq.w	80032f0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fb4:	4b26      	ldr	r3, [pc, #152]	; (8003050 <HAL_RCC_OscConfig+0x934>)
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d116      	bne.n	8002fee <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fc0:	4b23      	ldr	r3, [pc, #140]	; (8003050 <HAL_RCC_OscConfig+0x934>)
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	4a22      	ldr	r2, [pc, #136]	; (8003050 <HAL_RCC_OscConfig+0x934>)
 8002fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fca:	61d3      	str	r3, [r2, #28]
 8002fcc:	4b20      	ldr	r3, [pc, #128]	; (8003050 <HAL_RCC_OscConfig+0x934>)
 8002fce:	69db      	ldr	r3, [r3, #28]
 8002fd0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002fe6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fee:	4b1a      	ldr	r3, [pc, #104]	; (8003058 <HAL_RCC_OscConfig+0x93c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d11a      	bne.n	8003030 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ffa:	4b17      	ldr	r3, [pc, #92]	; (8003058 <HAL_RCC_OscConfig+0x93c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a16      	ldr	r2, [pc, #88]	; (8003058 <HAL_RCC_OscConfig+0x93c>)
 8003000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003004:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003006:	f7fe fb95 	bl	8001734 <HAL_GetTick>
 800300a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300e:	e009      	b.n	8003024 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003010:	f7fe fb90 	bl	8001734 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b64      	cmp	r3, #100	; 0x64
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e3b1      	b.n	8003788 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003024:	4b0c      	ldr	r3, [pc, #48]	; (8003058 <HAL_RCC_OscConfig+0x93c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0ef      	beq.n	8003010 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003034:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d10d      	bne.n	800305c <HAL_RCC_OscConfig+0x940>
 8003040:	4b03      	ldr	r3, [pc, #12]	; (8003050 <HAL_RCC_OscConfig+0x934>)
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	4a02      	ldr	r2, [pc, #8]	; (8003050 <HAL_RCC_OscConfig+0x934>)
 8003046:	f043 0301 	orr.w	r3, r3, #1
 800304a:	6213      	str	r3, [r2, #32]
 800304c:	e03c      	b.n	80030c8 <HAL_RCC_OscConfig+0x9ac>
 800304e:	bf00      	nop
 8003050:	40021000 	.word	0x40021000
 8003054:	10908120 	.word	0x10908120
 8003058:	40007000 	.word	0x40007000
 800305c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003060:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10c      	bne.n	8003086 <HAL_RCC_OscConfig+0x96a>
 800306c:	4bc1      	ldr	r3, [pc, #772]	; (8003374 <HAL_RCC_OscConfig+0xc58>)
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	4ac0      	ldr	r2, [pc, #768]	; (8003374 <HAL_RCC_OscConfig+0xc58>)
 8003072:	f023 0301 	bic.w	r3, r3, #1
 8003076:	6213      	str	r3, [r2, #32]
 8003078:	4bbe      	ldr	r3, [pc, #760]	; (8003374 <HAL_RCC_OscConfig+0xc58>)
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	4abd      	ldr	r2, [pc, #756]	; (8003374 <HAL_RCC_OscConfig+0xc58>)
 800307e:	f023 0304 	bic.w	r3, r3, #4
 8003082:	6213      	str	r3, [r2, #32]
 8003084:	e020      	b.n	80030c8 <HAL_RCC_OscConfig+0x9ac>
 8003086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800308a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	2b05      	cmp	r3, #5
 8003094:	d10c      	bne.n	80030b0 <HAL_RCC_OscConfig+0x994>
 8003096:	4bb7      	ldr	r3, [pc, #732]	; (8003374 <HAL_RCC_OscConfig+0xc58>)
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	4ab6      	ldr	r2, [pc, #728]	; (8003374 <HAL_RCC_OscConfig+0xc58>)
 800309c:	f043 0304 	orr.w	r3, r3, #4
 80030a0:	6213      	str	r3, [r2, #32]
 80030a2:	4bb4      	ldr	r3, [pc, #720]	; (8003374 <HAL_RCC_OscConfig+0xc58>)
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	4ab3      	ldr	r2, [pc, #716]	; (8003374 <HAL_RCC_OscConfig+0xc58>)
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	6213      	str	r3, [r2, #32]
 80030ae:	e00b      	b.n	80030c8 <HAL_RCC_OscConfig+0x9ac>
 80030b0:	4bb0      	ldr	r3, [pc, #704]	; (8003374 <HAL_RCC_OscConfig+0xc58>)
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	4aaf      	ldr	r2, [pc, #700]	; (8003374 <HAL_RCC_OscConfig+0xc58>)
 80030b6:	f023 0301 	bic.w	r3, r3, #1
 80030ba:	6213      	str	r3, [r2, #32]
 80030bc:	4bad      	ldr	r3, [pc, #692]	; (8003374 <HAL_RCC_OscConfig+0xc58>)
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	4aac      	ldr	r2, [pc, #688]	; (8003374 <HAL_RCC_OscConfig+0xc58>)
 80030c2:	f023 0304 	bic.w	r3, r3, #4
 80030c6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 8081 	beq.w	80031dc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030da:	f7fe fb2b 	bl	8001734 <HAL_GetTick>
 80030de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e2:	e00b      	b.n	80030fc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030e4:	f7fe fb26 	bl	8001734 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e345      	b.n	8003788 <HAL_RCC_OscConfig+0x106c>
 80030fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003100:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003104:	2202      	movs	r2, #2
 8003106:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800310c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	fa93 f2a3 	rbit	r2, r3
 8003116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800311a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003124:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003128:	2202      	movs	r2, #2
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003130:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	fa93 f2a3 	rbit	r2, r3
 800313a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800313e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003142:	601a      	str	r2, [r3, #0]
  return result;
 8003144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003148:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800314c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800314e:	fab3 f383 	clz	r3, r3
 8003152:	b2db      	uxtb	r3, r3
 8003154:	095b      	lsrs	r3, r3, #5
 8003156:	b2db      	uxtb	r3, r3
 8003158:	f043 0302 	orr.w	r3, r3, #2
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d102      	bne.n	8003168 <HAL_RCC_OscConfig+0xa4c>
 8003162:	4b84      	ldr	r3, [pc, #528]	; (8003374 <HAL_RCC_OscConfig+0xc58>)
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	e013      	b.n	8003190 <HAL_RCC_OscConfig+0xa74>
 8003168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800316c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003170:	2202      	movs	r2, #2
 8003172:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003178:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	fa93 f2a3 	rbit	r2, r3
 8003182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003186:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	4b79      	ldr	r3, [pc, #484]	; (8003374 <HAL_RCC_OscConfig+0xc58>)
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003194:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003198:	2102      	movs	r1, #2
 800319a:	6011      	str	r1, [r2, #0]
 800319c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031a0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80031a4:	6812      	ldr	r2, [r2, #0]
 80031a6:	fa92 f1a2 	rbit	r1, r2
 80031aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031ae:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80031b2:	6011      	str	r1, [r2, #0]
  return result;
 80031b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031b8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80031bc:	6812      	ldr	r2, [r2, #0]
 80031be:	fab2 f282 	clz	r2, r2
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	f002 021f 	and.w	r2, r2, #31
 80031ce:	2101      	movs	r1, #1
 80031d0:	fa01 f202 	lsl.w	r2, r1, r2
 80031d4:	4013      	ands	r3, r2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d084      	beq.n	80030e4 <HAL_RCC_OscConfig+0x9c8>
 80031da:	e07f      	b.n	80032dc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031dc:	f7fe faaa 	bl	8001734 <HAL_GetTick>
 80031e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e4:	e00b      	b.n	80031fe <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e6:	f7fe faa5 	bl	8001734 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e2c4      	b.n	8003788 <HAL_RCC_OscConfig+0x106c>
 80031fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003202:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003206:	2202      	movs	r2, #2
 8003208:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800320e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	fa93 f2a3 	rbit	r2, r3
 8003218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800321c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003226:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800322a:	2202      	movs	r2, #2
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003232:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	fa93 f2a3 	rbit	r2, r3
 800323c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003240:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003244:	601a      	str	r2, [r3, #0]
  return result;
 8003246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800324a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800324e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003250:	fab3 f383 	clz	r3, r3
 8003254:	b2db      	uxtb	r3, r3
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	b2db      	uxtb	r3, r3
 800325a:	f043 0302 	orr.w	r3, r3, #2
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d102      	bne.n	800326a <HAL_RCC_OscConfig+0xb4e>
 8003264:	4b43      	ldr	r3, [pc, #268]	; (8003374 <HAL_RCC_OscConfig+0xc58>)
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	e013      	b.n	8003292 <HAL_RCC_OscConfig+0xb76>
 800326a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800326e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003272:	2202      	movs	r2, #2
 8003274:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800327a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	fa93 f2a3 	rbit	r2, r3
 8003284:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003288:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	4b39      	ldr	r3, [pc, #228]	; (8003374 <HAL_RCC_OscConfig+0xc58>)
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003296:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800329a:	2102      	movs	r1, #2
 800329c:	6011      	str	r1, [r2, #0]
 800329e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032a2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80032a6:	6812      	ldr	r2, [r2, #0]
 80032a8:	fa92 f1a2 	rbit	r1, r2
 80032ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032b0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80032b4:	6011      	str	r1, [r2, #0]
  return result;
 80032b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032ba:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80032be:	6812      	ldr	r2, [r2, #0]
 80032c0:	fab2 f282 	clz	r2, r2
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	f002 021f 	and.w	r2, r2, #31
 80032d0:	2101      	movs	r1, #1
 80032d2:	fa01 f202 	lsl.w	r2, r1, r2
 80032d6:	4013      	ands	r3, r2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d184      	bne.n	80031e6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032dc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d105      	bne.n	80032f0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032e4:	4b23      	ldr	r3, [pc, #140]	; (8003374 <HAL_RCC_OscConfig+0xc58>)
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	4a22      	ldr	r2, [pc, #136]	; (8003374 <HAL_RCC_OscConfig+0xc58>)
 80032ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ee:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 8242 	beq.w	8003786 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003302:	4b1c      	ldr	r3, [pc, #112]	; (8003374 <HAL_RCC_OscConfig+0xc58>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f003 030c 	and.w	r3, r3, #12
 800330a:	2b08      	cmp	r3, #8
 800330c:	f000 8213 	beq.w	8003736 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003310:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003314:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	2b02      	cmp	r3, #2
 800331e:	f040 8162 	bne.w	80035e6 <HAL_RCC_OscConfig+0xeca>
 8003322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003326:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800332a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800332e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003334:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	fa93 f2a3 	rbit	r2, r3
 800333e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003342:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003346:	601a      	str	r2, [r3, #0]
  return result;
 8003348:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800334c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003350:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003352:	fab3 f383 	clz	r3, r3
 8003356:	b2db      	uxtb	r3, r3
 8003358:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800335c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	461a      	mov	r2, r3
 8003364:	2300      	movs	r3, #0
 8003366:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003368:	f7fe f9e4 	bl	8001734 <HAL_GetTick>
 800336c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003370:	e00c      	b.n	800338c <HAL_RCC_OscConfig+0xc70>
 8003372:	bf00      	nop
 8003374:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003378:	f7fe f9dc 	bl	8001734 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e1fd      	b.n	8003788 <HAL_RCC_OscConfig+0x106c>
 800338c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003390:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003394:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003398:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	fa93 f2a3 	rbit	r2, r3
 80033a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ac:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80033b0:	601a      	str	r2, [r3, #0]
  return result;
 80033b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80033ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033bc:	fab3 f383 	clz	r3, r3
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	095b      	lsrs	r3, r3, #5
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	f043 0301 	orr.w	r3, r3, #1
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d102      	bne.n	80033d6 <HAL_RCC_OscConfig+0xcba>
 80033d0:	4bb0      	ldr	r3, [pc, #704]	; (8003694 <HAL_RCC_OscConfig+0xf78>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	e027      	b.n	8003426 <HAL_RCC_OscConfig+0xd0a>
 80033d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033da:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80033de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	fa93 f2a3 	rbit	r2, r3
 80033f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003400:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003404:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800340e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	fa93 f2a3 	rbit	r2, r3
 8003418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800341c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	4b9c      	ldr	r3, [pc, #624]	; (8003694 <HAL_RCC_OscConfig+0xf78>)
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800342a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800342e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003432:	6011      	str	r1, [r2, #0]
 8003434:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003438:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800343c:	6812      	ldr	r2, [r2, #0]
 800343e:	fa92 f1a2 	rbit	r1, r2
 8003442:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003446:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800344a:	6011      	str	r1, [r2, #0]
  return result;
 800344c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003450:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003454:	6812      	ldr	r2, [r2, #0]
 8003456:	fab2 f282 	clz	r2, r2
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	f042 0220 	orr.w	r2, r2, #32
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	f002 021f 	and.w	r2, r2, #31
 8003466:	2101      	movs	r1, #1
 8003468:	fa01 f202 	lsl.w	r2, r1, r2
 800346c:	4013      	ands	r3, r2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d182      	bne.n	8003378 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003472:	4b88      	ldr	r3, [pc, #544]	; (8003694 <HAL_RCC_OscConfig+0xf78>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800347a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800347e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800348a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	430b      	orrs	r3, r1
 8003494:	497f      	ldr	r1, [pc, #508]	; (8003694 <HAL_RCC_OscConfig+0xf78>)
 8003496:	4313      	orrs	r3, r2
 8003498:	604b      	str	r3, [r1, #4]
 800349a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800349e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80034a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ac:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	fa93 f2a3 	rbit	r2, r3
 80034b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ba:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80034be:	601a      	str	r2, [r3, #0]
  return result;
 80034c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80034c8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034ca:	fab3 f383 	clz	r3, r3
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	461a      	mov	r2, r3
 80034dc:	2301      	movs	r3, #1
 80034de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e0:	f7fe f928 	bl	8001734 <HAL_GetTick>
 80034e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034e8:	e009      	b.n	80034fe <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ea:	f7fe f923 	bl	8001734 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e144      	b.n	8003788 <HAL_RCC_OscConfig+0x106c>
 80034fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003502:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003506:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800350a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003510:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	fa93 f2a3 	rbit	r2, r3
 800351a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800351e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003522:	601a      	str	r2, [r3, #0]
  return result;
 8003524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003528:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800352c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800352e:	fab3 f383 	clz	r3, r3
 8003532:	b2db      	uxtb	r3, r3
 8003534:	095b      	lsrs	r3, r3, #5
 8003536:	b2db      	uxtb	r3, r3
 8003538:	f043 0301 	orr.w	r3, r3, #1
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b01      	cmp	r3, #1
 8003540:	d102      	bne.n	8003548 <HAL_RCC_OscConfig+0xe2c>
 8003542:	4b54      	ldr	r3, [pc, #336]	; (8003694 <HAL_RCC_OscConfig+0xf78>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	e027      	b.n	8003598 <HAL_RCC_OscConfig+0xe7c>
 8003548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800354c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003550:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003554:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800355a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	fa93 f2a3 	rbit	r2, r3
 8003564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003568:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003572:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003576:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003580:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	fa93 f2a3 	rbit	r2, r3
 800358a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800358e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	4b3f      	ldr	r3, [pc, #252]	; (8003694 <HAL_RCC_OscConfig+0xf78>)
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800359c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80035a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80035a4:	6011      	str	r1, [r2, #0]
 80035a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035aa:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80035ae:	6812      	ldr	r2, [r2, #0]
 80035b0:	fa92 f1a2 	rbit	r1, r2
 80035b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035b8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80035bc:	6011      	str	r1, [r2, #0]
  return result;
 80035be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035c2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80035c6:	6812      	ldr	r2, [r2, #0]
 80035c8:	fab2 f282 	clz	r2, r2
 80035cc:	b2d2      	uxtb	r2, r2
 80035ce:	f042 0220 	orr.w	r2, r2, #32
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	f002 021f 	and.w	r2, r2, #31
 80035d8:	2101      	movs	r1, #1
 80035da:	fa01 f202 	lsl.w	r2, r1, r2
 80035de:	4013      	ands	r3, r2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d082      	beq.n	80034ea <HAL_RCC_OscConfig+0xdce>
 80035e4:	e0cf      	b.n	8003786 <HAL_RCC_OscConfig+0x106a>
 80035e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ea:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80035ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	fa93 f2a3 	rbit	r2, r3
 8003602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003606:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800360a:	601a      	str	r2, [r3, #0]
  return result;
 800360c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003610:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003614:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003616:	fab3 f383 	clz	r3, r3
 800361a:	b2db      	uxtb	r3, r3
 800361c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003620:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	461a      	mov	r2, r3
 8003628:	2300      	movs	r3, #0
 800362a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362c:	f7fe f882 	bl	8001734 <HAL_GetTick>
 8003630:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003634:	e009      	b.n	800364a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003636:	f7fe f87d 	bl	8001734 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e09e      	b.n	8003788 <HAL_RCC_OscConfig+0x106c>
 800364a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800364e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003652:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003656:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	fa93 f2a3 	rbit	r2, r3
 8003666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800366a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800366e:	601a      	str	r2, [r3, #0]
  return result;
 8003670:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003674:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003678:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800367a:	fab3 f383 	clz	r3, r3
 800367e:	b2db      	uxtb	r3, r3
 8003680:	095b      	lsrs	r3, r3, #5
 8003682:	b2db      	uxtb	r3, r3
 8003684:	f043 0301 	orr.w	r3, r3, #1
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b01      	cmp	r3, #1
 800368c:	d104      	bne.n	8003698 <HAL_RCC_OscConfig+0xf7c>
 800368e:	4b01      	ldr	r3, [pc, #4]	; (8003694 <HAL_RCC_OscConfig+0xf78>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	e029      	b.n	80036e8 <HAL_RCC_OscConfig+0xfcc>
 8003694:	40021000 	.word	0x40021000
 8003698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800369c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80036a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036aa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	fa93 f2a3 	rbit	r2, r3
 80036b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80036c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	fa93 f2a3 	rbit	r2, r3
 80036da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036de:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	4b2b      	ldr	r3, [pc, #172]	; (8003794 <HAL_RCC_OscConfig+0x1078>)
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036ec:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80036f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80036f4:	6011      	str	r1, [r2, #0]
 80036f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036fa:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80036fe:	6812      	ldr	r2, [r2, #0]
 8003700:	fa92 f1a2 	rbit	r1, r2
 8003704:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003708:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800370c:	6011      	str	r1, [r2, #0]
  return result;
 800370e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003712:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003716:	6812      	ldr	r2, [r2, #0]
 8003718:	fab2 f282 	clz	r2, r2
 800371c:	b2d2      	uxtb	r2, r2
 800371e:	f042 0220 	orr.w	r2, r2, #32
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	f002 021f 	and.w	r2, r2, #31
 8003728:	2101      	movs	r1, #1
 800372a:	fa01 f202 	lsl.w	r2, r1, r2
 800372e:	4013      	ands	r3, r2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d180      	bne.n	8003636 <HAL_RCC_OscConfig+0xf1a>
 8003734:	e027      	b.n	8003786 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800373a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e01e      	b.n	8003788 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800374a:	4b12      	ldr	r3, [pc, #72]	; (8003794 <HAL_RCC_OscConfig+0x1078>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003752:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003756:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800375a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800375e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	429a      	cmp	r2, r3
 8003768:	d10b      	bne.n	8003782 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800376a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800376e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003776:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800377e:	429a      	cmp	r2, r3
 8003780:	d001      	beq.n	8003786 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e000      	b.n	8003788 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	40021000 	.word	0x40021000

08003798 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b09e      	sub	sp, #120	; 0x78
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e162      	b.n	8003a76 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037b0:	4b90      	ldr	r3, [pc, #576]	; (80039f4 <HAL_RCC_ClockConfig+0x25c>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d910      	bls.n	80037e0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037be:	4b8d      	ldr	r3, [pc, #564]	; (80039f4 <HAL_RCC_ClockConfig+0x25c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f023 0207 	bic.w	r2, r3, #7
 80037c6:	498b      	ldr	r1, [pc, #556]	; (80039f4 <HAL_RCC_ClockConfig+0x25c>)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ce:	4b89      	ldr	r3, [pc, #548]	; (80039f4 <HAL_RCC_ClockConfig+0x25c>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d001      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e14a      	b.n	8003a76 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d008      	beq.n	80037fe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037ec:	4b82      	ldr	r3, [pc, #520]	; (80039f8 <HAL_RCC_ClockConfig+0x260>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	497f      	ldr	r1, [pc, #508]	; (80039f8 <HAL_RCC_ClockConfig+0x260>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 80dc 	beq.w	80039c4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d13c      	bne.n	800388e <HAL_RCC_ClockConfig+0xf6>
 8003814:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003818:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800381c:	fa93 f3a3 	rbit	r3, r3
 8003820:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003824:	fab3 f383 	clz	r3, r3
 8003828:	b2db      	uxtb	r3, r3
 800382a:	095b      	lsrs	r3, r3, #5
 800382c:	b2db      	uxtb	r3, r3
 800382e:	f043 0301 	orr.w	r3, r3, #1
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b01      	cmp	r3, #1
 8003836:	d102      	bne.n	800383e <HAL_RCC_ClockConfig+0xa6>
 8003838:	4b6f      	ldr	r3, [pc, #444]	; (80039f8 <HAL_RCC_ClockConfig+0x260>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	e00f      	b.n	800385e <HAL_RCC_ClockConfig+0xc6>
 800383e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003842:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003844:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003846:	fa93 f3a3 	rbit	r3, r3
 800384a:	667b      	str	r3, [r7, #100]	; 0x64
 800384c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003850:	663b      	str	r3, [r7, #96]	; 0x60
 8003852:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003854:	fa93 f3a3 	rbit	r3, r3
 8003858:	65fb      	str	r3, [r7, #92]	; 0x5c
 800385a:	4b67      	ldr	r3, [pc, #412]	; (80039f8 <HAL_RCC_ClockConfig+0x260>)
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003862:	65ba      	str	r2, [r7, #88]	; 0x58
 8003864:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003866:	fa92 f2a2 	rbit	r2, r2
 800386a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800386c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800386e:	fab2 f282 	clz	r2, r2
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	f042 0220 	orr.w	r2, r2, #32
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	f002 021f 	and.w	r2, r2, #31
 800387e:	2101      	movs	r1, #1
 8003880:	fa01 f202 	lsl.w	r2, r1, r2
 8003884:	4013      	ands	r3, r2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d17b      	bne.n	8003982 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e0f3      	b.n	8003a76 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b02      	cmp	r3, #2
 8003894:	d13c      	bne.n	8003910 <HAL_RCC_ClockConfig+0x178>
 8003896:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800389a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800389e:	fa93 f3a3 	rbit	r3, r3
 80038a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80038a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a6:	fab3 f383 	clz	r3, r3
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	095b      	lsrs	r3, r3, #5
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f043 0301 	orr.w	r3, r3, #1
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d102      	bne.n	80038c0 <HAL_RCC_ClockConfig+0x128>
 80038ba:	4b4f      	ldr	r3, [pc, #316]	; (80039f8 <HAL_RCC_ClockConfig+0x260>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	e00f      	b.n	80038e0 <HAL_RCC_ClockConfig+0x148>
 80038c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038c4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038c8:	fa93 f3a3 	rbit	r3, r3
 80038cc:	647b      	str	r3, [r7, #68]	; 0x44
 80038ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038d2:	643b      	str	r3, [r7, #64]	; 0x40
 80038d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038d6:	fa93 f3a3 	rbit	r3, r3
 80038da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038dc:	4b46      	ldr	r3, [pc, #280]	; (80039f8 <HAL_RCC_ClockConfig+0x260>)
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038e4:	63ba      	str	r2, [r7, #56]	; 0x38
 80038e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038e8:	fa92 f2a2 	rbit	r2, r2
 80038ec:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80038ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038f0:	fab2 f282 	clz	r2, r2
 80038f4:	b2d2      	uxtb	r2, r2
 80038f6:	f042 0220 	orr.w	r2, r2, #32
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	f002 021f 	and.w	r2, r2, #31
 8003900:	2101      	movs	r1, #1
 8003902:	fa01 f202 	lsl.w	r2, r1, r2
 8003906:	4013      	ands	r3, r2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d13a      	bne.n	8003982 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e0b2      	b.n	8003a76 <HAL_RCC_ClockConfig+0x2de>
 8003910:	2302      	movs	r3, #2
 8003912:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003916:	fa93 f3a3 	rbit	r3, r3
 800391a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800391c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800391e:	fab3 f383 	clz	r3, r3
 8003922:	b2db      	uxtb	r3, r3
 8003924:	095b      	lsrs	r3, r3, #5
 8003926:	b2db      	uxtb	r3, r3
 8003928:	f043 0301 	orr.w	r3, r3, #1
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b01      	cmp	r3, #1
 8003930:	d102      	bne.n	8003938 <HAL_RCC_ClockConfig+0x1a0>
 8003932:	4b31      	ldr	r3, [pc, #196]	; (80039f8 <HAL_RCC_ClockConfig+0x260>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	e00d      	b.n	8003954 <HAL_RCC_ClockConfig+0x1bc>
 8003938:	2302      	movs	r3, #2
 800393a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393e:	fa93 f3a3 	rbit	r3, r3
 8003942:	627b      	str	r3, [r7, #36]	; 0x24
 8003944:	2302      	movs	r3, #2
 8003946:	623b      	str	r3, [r7, #32]
 8003948:	6a3b      	ldr	r3, [r7, #32]
 800394a:	fa93 f3a3 	rbit	r3, r3
 800394e:	61fb      	str	r3, [r7, #28]
 8003950:	4b29      	ldr	r3, [pc, #164]	; (80039f8 <HAL_RCC_ClockConfig+0x260>)
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	2202      	movs	r2, #2
 8003956:	61ba      	str	r2, [r7, #24]
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	fa92 f2a2 	rbit	r2, r2
 800395e:	617a      	str	r2, [r7, #20]
  return result;
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	fab2 f282 	clz	r2, r2
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	f042 0220 	orr.w	r2, r2, #32
 800396c:	b2d2      	uxtb	r2, r2
 800396e:	f002 021f 	and.w	r2, r2, #31
 8003972:	2101      	movs	r1, #1
 8003974:	fa01 f202 	lsl.w	r2, r1, r2
 8003978:	4013      	ands	r3, r2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e079      	b.n	8003a76 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003982:	4b1d      	ldr	r3, [pc, #116]	; (80039f8 <HAL_RCC_ClockConfig+0x260>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f023 0203 	bic.w	r2, r3, #3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	491a      	ldr	r1, [pc, #104]	; (80039f8 <HAL_RCC_ClockConfig+0x260>)
 8003990:	4313      	orrs	r3, r2
 8003992:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003994:	f7fd fece 	bl	8001734 <HAL_GetTick>
 8003998:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800399a:	e00a      	b.n	80039b2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800399c:	f7fd feca 	bl	8001734 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e061      	b.n	8003a76 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b2:	4b11      	ldr	r3, [pc, #68]	; (80039f8 <HAL_RCC_ClockConfig+0x260>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f003 020c 	and.w	r2, r3, #12
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d1eb      	bne.n	800399c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039c4:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <HAL_RCC_ClockConfig+0x25c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d214      	bcs.n	80039fc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d2:	4b08      	ldr	r3, [pc, #32]	; (80039f4 <HAL_RCC_ClockConfig+0x25c>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f023 0207 	bic.w	r2, r3, #7
 80039da:	4906      	ldr	r1, [pc, #24]	; (80039f4 <HAL_RCC_ClockConfig+0x25c>)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	4313      	orrs	r3, r2
 80039e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e2:	4b04      	ldr	r3, [pc, #16]	; (80039f4 <HAL_RCC_ClockConfig+0x25c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d005      	beq.n	80039fc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e040      	b.n	8003a76 <HAL_RCC_ClockConfig+0x2de>
 80039f4:	40022000 	.word	0x40022000
 80039f8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d008      	beq.n	8003a1a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a08:	4b1d      	ldr	r3, [pc, #116]	; (8003a80 <HAL_RCC_ClockConfig+0x2e8>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	491a      	ldr	r1, [pc, #104]	; (8003a80 <HAL_RCC_ClockConfig+0x2e8>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d009      	beq.n	8003a3a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a26:	4b16      	ldr	r3, [pc, #88]	; (8003a80 <HAL_RCC_ClockConfig+0x2e8>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	4912      	ldr	r1, [pc, #72]	; (8003a80 <HAL_RCC_ClockConfig+0x2e8>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a3a:	f000 f829 	bl	8003a90 <HAL_RCC_GetSysClockFreq>
 8003a3e:	4601      	mov	r1, r0
 8003a40:	4b0f      	ldr	r3, [pc, #60]	; (8003a80 <HAL_RCC_ClockConfig+0x2e8>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a48:	22f0      	movs	r2, #240	; 0xf0
 8003a4a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	fa92 f2a2 	rbit	r2, r2
 8003a52:	60fa      	str	r2, [r7, #12]
  return result;
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	fab2 f282 	clz	r2, r2
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	40d3      	lsrs	r3, r2
 8003a5e:	4a09      	ldr	r2, [pc, #36]	; (8003a84 <HAL_RCC_ClockConfig+0x2ec>)
 8003a60:	5cd3      	ldrb	r3, [r2, r3]
 8003a62:	fa21 f303 	lsr.w	r3, r1, r3
 8003a66:	4a08      	ldr	r2, [pc, #32]	; (8003a88 <HAL_RCC_ClockConfig+0x2f0>)
 8003a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003a6a:	4b08      	ldr	r3, [pc, #32]	; (8003a8c <HAL_RCC_ClockConfig+0x2f4>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fd fe1c 	bl	80016ac <HAL_InitTick>
  
  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3778      	adds	r7, #120	; 0x78
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	40021000 	.word	0x40021000
 8003a84:	08006f3c 	.word	0x08006f3c
 8003a88:	20000010 	.word	0x20000010
 8003a8c:	20000014 	.word	0x20000014

08003a90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b08b      	sub	sp, #44	; 0x2c
 8003a94:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	61fb      	str	r3, [r7, #28]
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	61bb      	str	r3, [r7, #24]
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003aaa:	4b29      	ldr	r3, [pc, #164]	; (8003b50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	f003 030c 	and.w	r3, r3, #12
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d002      	beq.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x30>
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d003      	beq.n	8003ac6 <HAL_RCC_GetSysClockFreq+0x36>
 8003abe:	e03c      	b.n	8003b3a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ac0:	4b24      	ldr	r3, [pc, #144]	; (8003b54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ac2:	623b      	str	r3, [r7, #32]
      break;
 8003ac4:	e03c      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003acc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003ad0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	fa92 f2a2 	rbit	r2, r2
 8003ad8:	607a      	str	r2, [r7, #4]
  return result;
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	fab2 f282 	clz	r2, r2
 8003ae0:	b2d2      	uxtb	r2, r2
 8003ae2:	40d3      	lsrs	r3, r2
 8003ae4:	4a1c      	ldr	r2, [pc, #112]	; (8003b58 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003ae6:	5cd3      	ldrb	r3, [r2, r3]
 8003ae8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003aea:	4b19      	ldr	r3, [pc, #100]	; (8003b50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	220f      	movs	r2, #15
 8003af4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	fa92 f2a2 	rbit	r2, r2
 8003afc:	60fa      	str	r2, [r7, #12]
  return result;
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	fab2 f282 	clz	r2, r2
 8003b04:	b2d2      	uxtb	r2, r2
 8003b06:	40d3      	lsrs	r3, r2
 8003b08:	4a14      	ldr	r2, [pc, #80]	; (8003b5c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b0a:	5cd3      	ldrb	r3, [r2, r3]
 8003b0c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d008      	beq.n	8003b2a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b18:	4a0e      	ldr	r2, [pc, #56]	; (8003b54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	fb02 f303 	mul.w	r3, r2, r3
 8003b26:	627b      	str	r3, [r7, #36]	; 0x24
 8003b28:	e004      	b.n	8003b34 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	4a0c      	ldr	r2, [pc, #48]	; (8003b60 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b2e:	fb02 f303 	mul.w	r3, r2, r3
 8003b32:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	623b      	str	r3, [r7, #32]
      break;
 8003b38:	e002      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b3a:	4b06      	ldr	r3, [pc, #24]	; (8003b54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b3c:	623b      	str	r3, [r7, #32]
      break;
 8003b3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b40:	6a3b      	ldr	r3, [r7, #32]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	372c      	adds	r7, #44	; 0x2c
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	40021000 	.word	0x40021000
 8003b54:	007a1200 	.word	0x007a1200
 8003b58:	08006f4c 	.word	0x08006f4c
 8003b5c:	08006f5c 	.word	0x08006f5c
 8003b60:	003d0900 	.word	0x003d0900

08003b64 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b092      	sub	sp, #72	; 0x48
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003b74:	2300      	movs	r3, #0
 8003b76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 80d4 	beq.w	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b88:	4b4e      	ldr	r3, [pc, #312]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b8a:	69db      	ldr	r3, [r3, #28]
 8003b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10e      	bne.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b94:	4b4b      	ldr	r3, [pc, #300]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	4a4a      	ldr	r2, [pc, #296]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b9e:	61d3      	str	r3, [r2, #28]
 8003ba0:	4b48      	ldr	r3, [pc, #288]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba8:	60bb      	str	r3, [r7, #8]
 8003baa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bac:	2301      	movs	r3, #1
 8003bae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb2:	4b45      	ldr	r3, [pc, #276]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d118      	bne.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bbe:	4b42      	ldr	r3, [pc, #264]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a41      	ldr	r2, [pc, #260]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bca:	f7fd fdb3 	bl	8001734 <HAL_GetTick>
 8003bce:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd0:	e008      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd2:	f7fd fdaf 	bl	8001734 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b64      	cmp	r3, #100	; 0x64
 8003bde:	d901      	bls.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e169      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be4:	4b38      	ldr	r3, [pc, #224]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0f0      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bf0:	4b34      	ldr	r3, [pc, #208]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 8084 	beq.w	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d07c      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c10:	4b2c      	ldr	r3, [pc, #176]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c1e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c22:	fa93 f3a3 	rbit	r3, r3
 8003c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c2a:	fab3 f383 	clz	r3, r3
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	461a      	mov	r2, r3
 8003c32:	4b26      	ldr	r3, [pc, #152]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c34:	4413      	add	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	461a      	mov	r2, r3
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c46:	fa93 f3a3 	rbit	r3, r3
 8003c4a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c4e:	fab3 f383 	clz	r3, r3
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	461a      	mov	r2, r3
 8003c56:	4b1d      	ldr	r3, [pc, #116]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c58:	4413      	add	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	2300      	movs	r3, #0
 8003c60:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c62:	4a18      	ldr	r2, [pc, #96]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c66:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d04b      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c72:	f7fd fd5f 	bl	8001734 <HAL_GetTick>
 8003c76:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c78:	e00a      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c7a:	f7fd fd5b 	bl	8001734 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e113      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003c90:	2302      	movs	r3, #2
 8003c92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c96:	fa93 f3a3 	rbit	r3, r3
 8003c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	623b      	str	r3, [r7, #32]
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	fa93 f3a3 	rbit	r3, r3
 8003ca6:	61fb      	str	r3, [r7, #28]
  return result;
 8003ca8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003caa:	fab3 f383 	clz	r3, r3
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	095b      	lsrs	r3, r3, #5
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	f043 0302 	orr.w	r3, r3, #2
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d108      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003cbe:	4b01      	ldr	r3, [pc, #4]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	e00d      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	40007000 	.word	0x40007000
 8003ccc:	10908100 	.word	0x10908100
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	fa93 f3a3 	rbit	r3, r3
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	4b78      	ldr	r3, [pc, #480]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	613a      	str	r2, [r7, #16]
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	fa92 f2a2 	rbit	r2, r2
 8003cea:	60fa      	str	r2, [r7, #12]
  return result;
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	fab2 f282 	clz	r2, r2
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cf8:	b2d2      	uxtb	r2, r2
 8003cfa:	f002 021f 	and.w	r2, r2, #31
 8003cfe:	2101      	movs	r1, #1
 8003d00:	fa01 f202 	lsl.w	r2, r1, r2
 8003d04:	4013      	ands	r3, r2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0b7      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003d0a:	4b6d      	ldr	r3, [pc, #436]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	496a      	ldr	r1, [pc, #424]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d1c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d105      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d24:	4b66      	ldr	r3, [pc, #408]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	4a65      	ldr	r2, [pc, #404]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d2e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d008      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d3c:	4b60      	ldr	r3, [pc, #384]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d40:	f023 0203 	bic.w	r2, r3, #3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	495d      	ldr	r1, [pc, #372]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d008      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d5a:	4b59      	ldr	r3, [pc, #356]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	4956      	ldr	r1, [pc, #344]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d008      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d78:	4b51      	ldr	r3, [pc, #324]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	494e      	ldr	r1, [pc, #312]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0320 	and.w	r3, r3, #32
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d008      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d96:	4b4a      	ldr	r3, [pc, #296]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9a:	f023 0210 	bic.w	r2, r3, #16
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	4947      	ldr	r1, [pc, #284]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d008      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003db4:	4b42      	ldr	r3, [pc, #264]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc0:	493f      	ldr	r1, [pc, #252]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d008      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003dd2:	4b3b      	ldr	r3, [pc, #236]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd6:	f023 0220 	bic.w	r2, r3, #32
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	4938      	ldr	r1, [pc, #224]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0308 	and.w	r3, r3, #8
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d008      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003df0:	4b33      	ldr	r3, [pc, #204]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	4930      	ldr	r1, [pc, #192]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0310 	and.w	r3, r3, #16
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d008      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e0e:	4b2c      	ldr	r3, [pc, #176]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	4929      	ldr	r1, [pc, #164]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d008      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e2c:	4b24      	ldr	r3, [pc, #144]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e38:	4921      	ldr	r1, [pc, #132]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d008      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e4a:	4b1d      	ldr	r3, [pc, #116]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	491a      	ldr	r1, [pc, #104]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d008      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003e68:	4b15      	ldr	r3, [pc, #84]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e74:	4912      	ldr	r1, [pc, #72]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d008      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003e86:	4b0e      	ldr	r3, [pc, #56]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	490b      	ldr	r1, [pc, #44]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d008      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003ea4:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb0:	4903      	ldr	r1, [pc, #12]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3748      	adds	r7, #72	; 0x48
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	40021000 	.word	0x40021000

08003ec4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e049      	b.n	8003f6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d106      	bne.n	8003ef0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7fd fb0c 	bl	8001508 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3304      	adds	r3, #4
 8003f00:	4619      	mov	r1, r3
 8003f02:	4610      	mov	r0, r2
 8003f04:	f000 f962 	bl	80041cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
	...

08003f74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d001      	beq.n	8003f8c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e042      	b.n	8004012 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a21      	ldr	r2, [pc, #132]	; (8004020 <HAL_TIM_Base_Start+0xac>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d018      	beq.n	8003fd0 <HAL_TIM_Base_Start+0x5c>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa6:	d013      	beq.n	8003fd0 <HAL_TIM_Base_Start+0x5c>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a1d      	ldr	r2, [pc, #116]	; (8004024 <HAL_TIM_Base_Start+0xb0>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00e      	beq.n	8003fd0 <HAL_TIM_Base_Start+0x5c>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a1c      	ldr	r2, [pc, #112]	; (8004028 <HAL_TIM_Base_Start+0xb4>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d009      	beq.n	8003fd0 <HAL_TIM_Base_Start+0x5c>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a1a      	ldr	r2, [pc, #104]	; (800402c <HAL_TIM_Base_Start+0xb8>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d004      	beq.n	8003fd0 <HAL_TIM_Base_Start+0x5c>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a19      	ldr	r2, [pc, #100]	; (8004030 <HAL_TIM_Base_Start+0xbc>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d115      	bne.n	8003ffc <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689a      	ldr	r2, [r3, #8]
 8003fd6:	4b17      	ldr	r3, [pc, #92]	; (8004034 <HAL_TIM_Base_Start+0xc0>)
 8003fd8:	4013      	ands	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2b06      	cmp	r3, #6
 8003fe0:	d015      	beq.n	800400e <HAL_TIM_Base_Start+0x9a>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe8:	d011      	beq.n	800400e <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f042 0201 	orr.w	r2, r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ffa:	e008      	b.n	800400e <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	e000      	b.n	8004010 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800400e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	40012c00 	.word	0x40012c00
 8004024:	40000400 	.word	0x40000400
 8004028:	40000800 	.word	0x40000800
 800402c:	40013400 	.word	0x40013400
 8004030:	40014000 	.word	0x40014000
 8004034:	00010007 	.word	0x00010007

08004038 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004042:	2300      	movs	r3, #0
 8004044:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800404c:	2b01      	cmp	r3, #1
 800404e:	d101      	bne.n	8004054 <HAL_TIM_ConfigClockSource+0x1c>
 8004050:	2302      	movs	r3, #2
 8004052:	e0b6      	b.n	80041c2 <HAL_TIM_ConfigClockSource+0x18a>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004072:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004076:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800407e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004090:	d03e      	beq.n	8004110 <HAL_TIM_ConfigClockSource+0xd8>
 8004092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004096:	f200 8087 	bhi.w	80041a8 <HAL_TIM_ConfigClockSource+0x170>
 800409a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800409e:	f000 8086 	beq.w	80041ae <HAL_TIM_ConfigClockSource+0x176>
 80040a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a6:	d87f      	bhi.n	80041a8 <HAL_TIM_ConfigClockSource+0x170>
 80040a8:	2b70      	cmp	r3, #112	; 0x70
 80040aa:	d01a      	beq.n	80040e2 <HAL_TIM_ConfigClockSource+0xaa>
 80040ac:	2b70      	cmp	r3, #112	; 0x70
 80040ae:	d87b      	bhi.n	80041a8 <HAL_TIM_ConfigClockSource+0x170>
 80040b0:	2b60      	cmp	r3, #96	; 0x60
 80040b2:	d050      	beq.n	8004156 <HAL_TIM_ConfigClockSource+0x11e>
 80040b4:	2b60      	cmp	r3, #96	; 0x60
 80040b6:	d877      	bhi.n	80041a8 <HAL_TIM_ConfigClockSource+0x170>
 80040b8:	2b50      	cmp	r3, #80	; 0x50
 80040ba:	d03c      	beq.n	8004136 <HAL_TIM_ConfigClockSource+0xfe>
 80040bc:	2b50      	cmp	r3, #80	; 0x50
 80040be:	d873      	bhi.n	80041a8 <HAL_TIM_ConfigClockSource+0x170>
 80040c0:	2b40      	cmp	r3, #64	; 0x40
 80040c2:	d058      	beq.n	8004176 <HAL_TIM_ConfigClockSource+0x13e>
 80040c4:	2b40      	cmp	r3, #64	; 0x40
 80040c6:	d86f      	bhi.n	80041a8 <HAL_TIM_ConfigClockSource+0x170>
 80040c8:	2b30      	cmp	r3, #48	; 0x30
 80040ca:	d064      	beq.n	8004196 <HAL_TIM_ConfigClockSource+0x15e>
 80040cc:	2b30      	cmp	r3, #48	; 0x30
 80040ce:	d86b      	bhi.n	80041a8 <HAL_TIM_ConfigClockSource+0x170>
 80040d0:	2b20      	cmp	r3, #32
 80040d2:	d060      	beq.n	8004196 <HAL_TIM_ConfigClockSource+0x15e>
 80040d4:	2b20      	cmp	r3, #32
 80040d6:	d867      	bhi.n	80041a8 <HAL_TIM_ConfigClockSource+0x170>
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d05c      	beq.n	8004196 <HAL_TIM_ConfigClockSource+0x15e>
 80040dc:	2b10      	cmp	r3, #16
 80040de:	d05a      	beq.n	8004196 <HAL_TIM_ConfigClockSource+0x15e>
 80040e0:	e062      	b.n	80041a8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040f2:	f000 f975 	bl	80043e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004104:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	609a      	str	r2, [r3, #8]
      break;
 800410e:	e04f      	b.n	80041b0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004120:	f000 f95e 	bl	80043e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689a      	ldr	r2, [r3, #8]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004132:	609a      	str	r2, [r3, #8]
      break;
 8004134:	e03c      	b.n	80041b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004142:	461a      	mov	r2, r3
 8004144:	f000 f8d2 	bl	80042ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2150      	movs	r1, #80	; 0x50
 800414e:	4618      	mov	r0, r3
 8004150:	f000 f92b 	bl	80043aa <TIM_ITRx_SetConfig>
      break;
 8004154:	e02c      	b.n	80041b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004162:	461a      	mov	r2, r3
 8004164:	f000 f8f1 	bl	800434a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2160      	movs	r1, #96	; 0x60
 800416e:	4618      	mov	r0, r3
 8004170:	f000 f91b 	bl	80043aa <TIM_ITRx_SetConfig>
      break;
 8004174:	e01c      	b.n	80041b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004182:	461a      	mov	r2, r3
 8004184:	f000 f8b2 	bl	80042ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2140      	movs	r1, #64	; 0x40
 800418e:	4618      	mov	r0, r3
 8004190:	f000 f90b 	bl	80043aa <TIM_ITRx_SetConfig>
      break;
 8004194:	e00c      	b.n	80041b0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4619      	mov	r1, r3
 80041a0:	4610      	mov	r0, r2
 80041a2:	f000 f902 	bl	80043aa <TIM_ITRx_SetConfig>
      break;
 80041a6:	e003      	b.n	80041b0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	73fb      	strb	r3, [r7, #15]
      break;
 80041ac:	e000      	b.n	80041b0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80041ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
	...

080041cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a3c      	ldr	r2, [pc, #240]	; (80042d0 <TIM_Base_SetConfig+0x104>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d00f      	beq.n	8004204 <TIM_Base_SetConfig+0x38>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ea:	d00b      	beq.n	8004204 <TIM_Base_SetConfig+0x38>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a39      	ldr	r2, [pc, #228]	; (80042d4 <TIM_Base_SetConfig+0x108>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d007      	beq.n	8004204 <TIM_Base_SetConfig+0x38>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a38      	ldr	r2, [pc, #224]	; (80042d8 <TIM_Base_SetConfig+0x10c>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d003      	beq.n	8004204 <TIM_Base_SetConfig+0x38>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a37      	ldr	r2, [pc, #220]	; (80042dc <TIM_Base_SetConfig+0x110>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d108      	bne.n	8004216 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800420a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	4313      	orrs	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a2d      	ldr	r2, [pc, #180]	; (80042d0 <TIM_Base_SetConfig+0x104>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d01b      	beq.n	8004256 <TIM_Base_SetConfig+0x8a>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004224:	d017      	beq.n	8004256 <TIM_Base_SetConfig+0x8a>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a2a      	ldr	r2, [pc, #168]	; (80042d4 <TIM_Base_SetConfig+0x108>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d013      	beq.n	8004256 <TIM_Base_SetConfig+0x8a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a29      	ldr	r2, [pc, #164]	; (80042d8 <TIM_Base_SetConfig+0x10c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d00f      	beq.n	8004256 <TIM_Base_SetConfig+0x8a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a28      	ldr	r2, [pc, #160]	; (80042dc <TIM_Base_SetConfig+0x110>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d00b      	beq.n	8004256 <TIM_Base_SetConfig+0x8a>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a27      	ldr	r2, [pc, #156]	; (80042e0 <TIM_Base_SetConfig+0x114>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d007      	beq.n	8004256 <TIM_Base_SetConfig+0x8a>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a26      	ldr	r2, [pc, #152]	; (80042e4 <TIM_Base_SetConfig+0x118>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d003      	beq.n	8004256 <TIM_Base_SetConfig+0x8a>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a25      	ldr	r2, [pc, #148]	; (80042e8 <TIM_Base_SetConfig+0x11c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d108      	bne.n	8004268 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800425c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	4313      	orrs	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	4313      	orrs	r3, r2
 8004274:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a10      	ldr	r2, [pc, #64]	; (80042d0 <TIM_Base_SetConfig+0x104>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d00f      	beq.n	80042b4 <TIM_Base_SetConfig+0xe8>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a11      	ldr	r2, [pc, #68]	; (80042dc <TIM_Base_SetConfig+0x110>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d00b      	beq.n	80042b4 <TIM_Base_SetConfig+0xe8>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a10      	ldr	r2, [pc, #64]	; (80042e0 <TIM_Base_SetConfig+0x114>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d007      	beq.n	80042b4 <TIM_Base_SetConfig+0xe8>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a0f      	ldr	r2, [pc, #60]	; (80042e4 <TIM_Base_SetConfig+0x118>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d003      	beq.n	80042b4 <TIM_Base_SetConfig+0xe8>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a0e      	ldr	r2, [pc, #56]	; (80042e8 <TIM_Base_SetConfig+0x11c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d103      	bne.n	80042bc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	615a      	str	r2, [r3, #20]
}
 80042c2:	bf00      	nop
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	40012c00 	.word	0x40012c00
 80042d4:	40000400 	.word	0x40000400
 80042d8:	40000800 	.word	0x40000800
 80042dc:	40013400 	.word	0x40013400
 80042e0:	40014000 	.word	0x40014000
 80042e4:	40014400 	.word	0x40014400
 80042e8:	40014800 	.word	0x40014800

080042ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b087      	sub	sp, #28
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	f023 0201 	bic.w	r2, r3, #1
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004316:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	011b      	lsls	r3, r3, #4
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	4313      	orrs	r3, r2
 8004320:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f023 030a 	bic.w	r3, r3, #10
 8004328:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	4313      	orrs	r3, r2
 8004330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	621a      	str	r2, [r3, #32]
}
 800433e:	bf00      	nop
 8004340:	371c      	adds	r7, #28
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800434a:	b480      	push	{r7}
 800434c:	b087      	sub	sp, #28
 800434e:	af00      	add	r7, sp, #0
 8004350:	60f8      	str	r0, [r7, #12]
 8004352:	60b9      	str	r1, [r7, #8]
 8004354:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	f023 0210 	bic.w	r2, r3, #16
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004374:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	031b      	lsls	r3, r3, #12
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	4313      	orrs	r3, r2
 800437e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004386:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	011b      	lsls	r3, r3, #4
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	4313      	orrs	r3, r2
 8004390:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	621a      	str	r2, [r3, #32]
}
 800439e:	bf00      	nop
 80043a0:	371c      	adds	r7, #28
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b085      	sub	sp, #20
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
 80043b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	f043 0307 	orr.w	r3, r3, #7
 80043cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	609a      	str	r2, [r3, #8]
}
 80043d4:	bf00      	nop
 80043d6:	3714      	adds	r7, #20
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b087      	sub	sp, #28
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
 80043ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	021a      	lsls	r2, r3, #8
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	431a      	orrs	r2, r3
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	4313      	orrs	r3, r2
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	4313      	orrs	r3, r2
 800440c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	609a      	str	r2, [r3, #8]
}
 8004414:	bf00      	nop
 8004416:	371c      	adds	r7, #28
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004430:	2b01      	cmp	r3, #1
 8004432:	d101      	bne.n	8004438 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004434:	2302      	movs	r3, #2
 8004436:	e063      	b.n	8004500 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2202      	movs	r2, #2
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a2b      	ldr	r2, [pc, #172]	; (800450c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d004      	beq.n	800446c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a2a      	ldr	r2, [pc, #168]	; (8004510 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d108      	bne.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004472:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	4313      	orrs	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004484:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	4313      	orrs	r3, r2
 800448e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a1b      	ldr	r2, [pc, #108]	; (800450c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d018      	beq.n	80044d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044aa:	d013      	beq.n	80044d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a18      	ldr	r2, [pc, #96]	; (8004514 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d00e      	beq.n	80044d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a17      	ldr	r2, [pc, #92]	; (8004518 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d009      	beq.n	80044d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a12      	ldr	r2, [pc, #72]	; (8004510 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d004      	beq.n	80044d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a13      	ldr	r2, [pc, #76]	; (800451c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d10c      	bne.n	80044ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3714      	adds	r7, #20
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	40012c00 	.word	0x40012c00
 8004510:	40013400 	.word	0x40013400
 8004514:	40000400 	.word	0x40000400
 8004518:	40000800 	.word	0x40000800
 800451c:	40014000 	.word	0x40014000

08004520 <siprintf>:
 8004520:	b40e      	push	{r1, r2, r3}
 8004522:	b500      	push	{lr}
 8004524:	b09c      	sub	sp, #112	; 0x70
 8004526:	ab1d      	add	r3, sp, #116	; 0x74
 8004528:	9002      	str	r0, [sp, #8]
 800452a:	9006      	str	r0, [sp, #24]
 800452c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004530:	4809      	ldr	r0, [pc, #36]	; (8004558 <siprintf+0x38>)
 8004532:	9107      	str	r1, [sp, #28]
 8004534:	9104      	str	r1, [sp, #16]
 8004536:	4909      	ldr	r1, [pc, #36]	; (800455c <siprintf+0x3c>)
 8004538:	f853 2b04 	ldr.w	r2, [r3], #4
 800453c:	9105      	str	r1, [sp, #20]
 800453e:	6800      	ldr	r0, [r0, #0]
 8004540:	9301      	str	r3, [sp, #4]
 8004542:	a902      	add	r1, sp, #8
 8004544:	f000 f992 	bl	800486c <_svfiprintf_r>
 8004548:	9b02      	ldr	r3, [sp, #8]
 800454a:	2200      	movs	r2, #0
 800454c:	701a      	strb	r2, [r3, #0]
 800454e:	b01c      	add	sp, #112	; 0x70
 8004550:	f85d eb04 	ldr.w	lr, [sp], #4
 8004554:	b003      	add	sp, #12
 8004556:	4770      	bx	lr
 8004558:	20000068 	.word	0x20000068
 800455c:	ffff0208 	.word	0xffff0208

08004560 <memset>:
 8004560:	4402      	add	r2, r0
 8004562:	4603      	mov	r3, r0
 8004564:	4293      	cmp	r3, r2
 8004566:	d100      	bne.n	800456a <memset+0xa>
 8004568:	4770      	bx	lr
 800456a:	f803 1b01 	strb.w	r1, [r3], #1
 800456e:	e7f9      	b.n	8004564 <memset+0x4>

08004570 <__errno>:
 8004570:	4b01      	ldr	r3, [pc, #4]	; (8004578 <__errno+0x8>)
 8004572:	6818      	ldr	r0, [r3, #0]
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	20000068 	.word	0x20000068

0800457c <__libc_init_array>:
 800457c:	b570      	push	{r4, r5, r6, lr}
 800457e:	4d0d      	ldr	r5, [pc, #52]	; (80045b4 <__libc_init_array+0x38>)
 8004580:	4c0d      	ldr	r4, [pc, #52]	; (80045b8 <__libc_init_array+0x3c>)
 8004582:	1b64      	subs	r4, r4, r5
 8004584:	10a4      	asrs	r4, r4, #2
 8004586:	2600      	movs	r6, #0
 8004588:	42a6      	cmp	r6, r4
 800458a:	d109      	bne.n	80045a0 <__libc_init_array+0x24>
 800458c:	4d0b      	ldr	r5, [pc, #44]	; (80045bc <__libc_init_array+0x40>)
 800458e:	4c0c      	ldr	r4, [pc, #48]	; (80045c0 <__libc_init_array+0x44>)
 8004590:	f000 fc6a 	bl	8004e68 <_init>
 8004594:	1b64      	subs	r4, r4, r5
 8004596:	10a4      	asrs	r4, r4, #2
 8004598:	2600      	movs	r6, #0
 800459a:	42a6      	cmp	r6, r4
 800459c:	d105      	bne.n	80045aa <__libc_init_array+0x2e>
 800459e:	bd70      	pop	{r4, r5, r6, pc}
 80045a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045a4:	4798      	blx	r3
 80045a6:	3601      	adds	r6, #1
 80045a8:	e7ee      	b.n	8004588 <__libc_init_array+0xc>
 80045aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ae:	4798      	blx	r3
 80045b0:	3601      	adds	r6, #1
 80045b2:	e7f2      	b.n	800459a <__libc_init_array+0x1e>
 80045b4:	08006fa0 	.word	0x08006fa0
 80045b8:	08006fa0 	.word	0x08006fa0
 80045bc:	08006fa0 	.word	0x08006fa0
 80045c0:	08006fa4 	.word	0x08006fa4

080045c4 <__retarget_lock_acquire_recursive>:
 80045c4:	4770      	bx	lr

080045c6 <__retarget_lock_release_recursive>:
 80045c6:	4770      	bx	lr

080045c8 <_free_r>:
 80045c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045ca:	2900      	cmp	r1, #0
 80045cc:	d044      	beq.n	8004658 <_free_r+0x90>
 80045ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045d2:	9001      	str	r0, [sp, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f1a1 0404 	sub.w	r4, r1, #4
 80045da:	bfb8      	it	lt
 80045dc:	18e4      	addlt	r4, r4, r3
 80045de:	f000 f8df 	bl	80047a0 <__malloc_lock>
 80045e2:	4a1e      	ldr	r2, [pc, #120]	; (800465c <_free_r+0x94>)
 80045e4:	9801      	ldr	r0, [sp, #4]
 80045e6:	6813      	ldr	r3, [r2, #0]
 80045e8:	b933      	cbnz	r3, 80045f8 <_free_r+0x30>
 80045ea:	6063      	str	r3, [r4, #4]
 80045ec:	6014      	str	r4, [r2, #0]
 80045ee:	b003      	add	sp, #12
 80045f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045f4:	f000 b8da 	b.w	80047ac <__malloc_unlock>
 80045f8:	42a3      	cmp	r3, r4
 80045fa:	d908      	bls.n	800460e <_free_r+0x46>
 80045fc:	6825      	ldr	r5, [r4, #0]
 80045fe:	1961      	adds	r1, r4, r5
 8004600:	428b      	cmp	r3, r1
 8004602:	bf01      	itttt	eq
 8004604:	6819      	ldreq	r1, [r3, #0]
 8004606:	685b      	ldreq	r3, [r3, #4]
 8004608:	1949      	addeq	r1, r1, r5
 800460a:	6021      	streq	r1, [r4, #0]
 800460c:	e7ed      	b.n	80045ea <_free_r+0x22>
 800460e:	461a      	mov	r2, r3
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	b10b      	cbz	r3, 8004618 <_free_r+0x50>
 8004614:	42a3      	cmp	r3, r4
 8004616:	d9fa      	bls.n	800460e <_free_r+0x46>
 8004618:	6811      	ldr	r1, [r2, #0]
 800461a:	1855      	adds	r5, r2, r1
 800461c:	42a5      	cmp	r5, r4
 800461e:	d10b      	bne.n	8004638 <_free_r+0x70>
 8004620:	6824      	ldr	r4, [r4, #0]
 8004622:	4421      	add	r1, r4
 8004624:	1854      	adds	r4, r2, r1
 8004626:	42a3      	cmp	r3, r4
 8004628:	6011      	str	r1, [r2, #0]
 800462a:	d1e0      	bne.n	80045ee <_free_r+0x26>
 800462c:	681c      	ldr	r4, [r3, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	6053      	str	r3, [r2, #4]
 8004632:	440c      	add	r4, r1
 8004634:	6014      	str	r4, [r2, #0]
 8004636:	e7da      	b.n	80045ee <_free_r+0x26>
 8004638:	d902      	bls.n	8004640 <_free_r+0x78>
 800463a:	230c      	movs	r3, #12
 800463c:	6003      	str	r3, [r0, #0]
 800463e:	e7d6      	b.n	80045ee <_free_r+0x26>
 8004640:	6825      	ldr	r5, [r4, #0]
 8004642:	1961      	adds	r1, r4, r5
 8004644:	428b      	cmp	r3, r1
 8004646:	bf04      	itt	eq
 8004648:	6819      	ldreq	r1, [r3, #0]
 800464a:	685b      	ldreq	r3, [r3, #4]
 800464c:	6063      	str	r3, [r4, #4]
 800464e:	bf04      	itt	eq
 8004650:	1949      	addeq	r1, r1, r5
 8004652:	6021      	streq	r1, [r4, #0]
 8004654:	6054      	str	r4, [r2, #4]
 8004656:	e7ca      	b.n	80045ee <_free_r+0x26>
 8004658:	b003      	add	sp, #12
 800465a:	bd30      	pop	{r4, r5, pc}
 800465c:	20000698 	.word	0x20000698

08004660 <sbrk_aligned>:
 8004660:	b570      	push	{r4, r5, r6, lr}
 8004662:	4e0e      	ldr	r6, [pc, #56]	; (800469c <sbrk_aligned+0x3c>)
 8004664:	460c      	mov	r4, r1
 8004666:	6831      	ldr	r1, [r6, #0]
 8004668:	4605      	mov	r5, r0
 800466a:	b911      	cbnz	r1, 8004672 <sbrk_aligned+0x12>
 800466c:	f000 fba6 	bl	8004dbc <_sbrk_r>
 8004670:	6030      	str	r0, [r6, #0]
 8004672:	4621      	mov	r1, r4
 8004674:	4628      	mov	r0, r5
 8004676:	f000 fba1 	bl	8004dbc <_sbrk_r>
 800467a:	1c43      	adds	r3, r0, #1
 800467c:	d00a      	beq.n	8004694 <sbrk_aligned+0x34>
 800467e:	1cc4      	adds	r4, r0, #3
 8004680:	f024 0403 	bic.w	r4, r4, #3
 8004684:	42a0      	cmp	r0, r4
 8004686:	d007      	beq.n	8004698 <sbrk_aligned+0x38>
 8004688:	1a21      	subs	r1, r4, r0
 800468a:	4628      	mov	r0, r5
 800468c:	f000 fb96 	bl	8004dbc <_sbrk_r>
 8004690:	3001      	adds	r0, #1
 8004692:	d101      	bne.n	8004698 <sbrk_aligned+0x38>
 8004694:	f04f 34ff 	mov.w	r4, #4294967295
 8004698:	4620      	mov	r0, r4
 800469a:	bd70      	pop	{r4, r5, r6, pc}
 800469c:	2000069c 	.word	0x2000069c

080046a0 <_malloc_r>:
 80046a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046a4:	1ccd      	adds	r5, r1, #3
 80046a6:	f025 0503 	bic.w	r5, r5, #3
 80046aa:	3508      	adds	r5, #8
 80046ac:	2d0c      	cmp	r5, #12
 80046ae:	bf38      	it	cc
 80046b0:	250c      	movcc	r5, #12
 80046b2:	2d00      	cmp	r5, #0
 80046b4:	4607      	mov	r7, r0
 80046b6:	db01      	blt.n	80046bc <_malloc_r+0x1c>
 80046b8:	42a9      	cmp	r1, r5
 80046ba:	d905      	bls.n	80046c8 <_malloc_r+0x28>
 80046bc:	230c      	movs	r3, #12
 80046be:	603b      	str	r3, [r7, #0]
 80046c0:	2600      	movs	r6, #0
 80046c2:	4630      	mov	r0, r6
 80046c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800479c <_malloc_r+0xfc>
 80046cc:	f000 f868 	bl	80047a0 <__malloc_lock>
 80046d0:	f8d8 3000 	ldr.w	r3, [r8]
 80046d4:	461c      	mov	r4, r3
 80046d6:	bb5c      	cbnz	r4, 8004730 <_malloc_r+0x90>
 80046d8:	4629      	mov	r1, r5
 80046da:	4638      	mov	r0, r7
 80046dc:	f7ff ffc0 	bl	8004660 <sbrk_aligned>
 80046e0:	1c43      	adds	r3, r0, #1
 80046e2:	4604      	mov	r4, r0
 80046e4:	d155      	bne.n	8004792 <_malloc_r+0xf2>
 80046e6:	f8d8 4000 	ldr.w	r4, [r8]
 80046ea:	4626      	mov	r6, r4
 80046ec:	2e00      	cmp	r6, #0
 80046ee:	d145      	bne.n	800477c <_malloc_r+0xdc>
 80046f0:	2c00      	cmp	r4, #0
 80046f2:	d048      	beq.n	8004786 <_malloc_r+0xe6>
 80046f4:	6823      	ldr	r3, [r4, #0]
 80046f6:	4631      	mov	r1, r6
 80046f8:	4638      	mov	r0, r7
 80046fa:	eb04 0903 	add.w	r9, r4, r3
 80046fe:	f000 fb5d 	bl	8004dbc <_sbrk_r>
 8004702:	4581      	cmp	r9, r0
 8004704:	d13f      	bne.n	8004786 <_malloc_r+0xe6>
 8004706:	6821      	ldr	r1, [r4, #0]
 8004708:	1a6d      	subs	r5, r5, r1
 800470a:	4629      	mov	r1, r5
 800470c:	4638      	mov	r0, r7
 800470e:	f7ff ffa7 	bl	8004660 <sbrk_aligned>
 8004712:	3001      	adds	r0, #1
 8004714:	d037      	beq.n	8004786 <_malloc_r+0xe6>
 8004716:	6823      	ldr	r3, [r4, #0]
 8004718:	442b      	add	r3, r5
 800471a:	6023      	str	r3, [r4, #0]
 800471c:	f8d8 3000 	ldr.w	r3, [r8]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d038      	beq.n	8004796 <_malloc_r+0xf6>
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	42a2      	cmp	r2, r4
 8004728:	d12b      	bne.n	8004782 <_malloc_r+0xe2>
 800472a:	2200      	movs	r2, #0
 800472c:	605a      	str	r2, [r3, #4]
 800472e:	e00f      	b.n	8004750 <_malloc_r+0xb0>
 8004730:	6822      	ldr	r2, [r4, #0]
 8004732:	1b52      	subs	r2, r2, r5
 8004734:	d41f      	bmi.n	8004776 <_malloc_r+0xd6>
 8004736:	2a0b      	cmp	r2, #11
 8004738:	d917      	bls.n	800476a <_malloc_r+0xca>
 800473a:	1961      	adds	r1, r4, r5
 800473c:	42a3      	cmp	r3, r4
 800473e:	6025      	str	r5, [r4, #0]
 8004740:	bf18      	it	ne
 8004742:	6059      	strne	r1, [r3, #4]
 8004744:	6863      	ldr	r3, [r4, #4]
 8004746:	bf08      	it	eq
 8004748:	f8c8 1000 	streq.w	r1, [r8]
 800474c:	5162      	str	r2, [r4, r5]
 800474e:	604b      	str	r3, [r1, #4]
 8004750:	4638      	mov	r0, r7
 8004752:	f104 060b 	add.w	r6, r4, #11
 8004756:	f000 f829 	bl	80047ac <__malloc_unlock>
 800475a:	f026 0607 	bic.w	r6, r6, #7
 800475e:	1d23      	adds	r3, r4, #4
 8004760:	1af2      	subs	r2, r6, r3
 8004762:	d0ae      	beq.n	80046c2 <_malloc_r+0x22>
 8004764:	1b9b      	subs	r3, r3, r6
 8004766:	50a3      	str	r3, [r4, r2]
 8004768:	e7ab      	b.n	80046c2 <_malloc_r+0x22>
 800476a:	42a3      	cmp	r3, r4
 800476c:	6862      	ldr	r2, [r4, #4]
 800476e:	d1dd      	bne.n	800472c <_malloc_r+0x8c>
 8004770:	f8c8 2000 	str.w	r2, [r8]
 8004774:	e7ec      	b.n	8004750 <_malloc_r+0xb0>
 8004776:	4623      	mov	r3, r4
 8004778:	6864      	ldr	r4, [r4, #4]
 800477a:	e7ac      	b.n	80046d6 <_malloc_r+0x36>
 800477c:	4634      	mov	r4, r6
 800477e:	6876      	ldr	r6, [r6, #4]
 8004780:	e7b4      	b.n	80046ec <_malloc_r+0x4c>
 8004782:	4613      	mov	r3, r2
 8004784:	e7cc      	b.n	8004720 <_malloc_r+0x80>
 8004786:	230c      	movs	r3, #12
 8004788:	603b      	str	r3, [r7, #0]
 800478a:	4638      	mov	r0, r7
 800478c:	f000 f80e 	bl	80047ac <__malloc_unlock>
 8004790:	e797      	b.n	80046c2 <_malloc_r+0x22>
 8004792:	6025      	str	r5, [r4, #0]
 8004794:	e7dc      	b.n	8004750 <_malloc_r+0xb0>
 8004796:	605b      	str	r3, [r3, #4]
 8004798:	deff      	udf	#255	; 0xff
 800479a:	bf00      	nop
 800479c:	20000698 	.word	0x20000698

080047a0 <__malloc_lock>:
 80047a0:	4801      	ldr	r0, [pc, #4]	; (80047a8 <__malloc_lock+0x8>)
 80047a2:	f7ff bf0f 	b.w	80045c4 <__retarget_lock_acquire_recursive>
 80047a6:	bf00      	nop
 80047a8:	20000694 	.word	0x20000694

080047ac <__malloc_unlock>:
 80047ac:	4801      	ldr	r0, [pc, #4]	; (80047b4 <__malloc_unlock+0x8>)
 80047ae:	f7ff bf0a 	b.w	80045c6 <__retarget_lock_release_recursive>
 80047b2:	bf00      	nop
 80047b4:	20000694 	.word	0x20000694

080047b8 <__ssputs_r>:
 80047b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047bc:	688e      	ldr	r6, [r1, #8]
 80047be:	461f      	mov	r7, r3
 80047c0:	42be      	cmp	r6, r7
 80047c2:	680b      	ldr	r3, [r1, #0]
 80047c4:	4682      	mov	sl, r0
 80047c6:	460c      	mov	r4, r1
 80047c8:	4690      	mov	r8, r2
 80047ca:	d82c      	bhi.n	8004826 <__ssputs_r+0x6e>
 80047cc:	898a      	ldrh	r2, [r1, #12]
 80047ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80047d2:	d026      	beq.n	8004822 <__ssputs_r+0x6a>
 80047d4:	6965      	ldr	r5, [r4, #20]
 80047d6:	6909      	ldr	r1, [r1, #16]
 80047d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047dc:	eba3 0901 	sub.w	r9, r3, r1
 80047e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80047e4:	1c7b      	adds	r3, r7, #1
 80047e6:	444b      	add	r3, r9
 80047e8:	106d      	asrs	r5, r5, #1
 80047ea:	429d      	cmp	r5, r3
 80047ec:	bf38      	it	cc
 80047ee:	461d      	movcc	r5, r3
 80047f0:	0553      	lsls	r3, r2, #21
 80047f2:	d527      	bpl.n	8004844 <__ssputs_r+0x8c>
 80047f4:	4629      	mov	r1, r5
 80047f6:	f7ff ff53 	bl	80046a0 <_malloc_r>
 80047fa:	4606      	mov	r6, r0
 80047fc:	b360      	cbz	r0, 8004858 <__ssputs_r+0xa0>
 80047fe:	6921      	ldr	r1, [r4, #16]
 8004800:	464a      	mov	r2, r9
 8004802:	f000 faeb 	bl	8004ddc <memcpy>
 8004806:	89a3      	ldrh	r3, [r4, #12]
 8004808:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800480c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004810:	81a3      	strh	r3, [r4, #12]
 8004812:	6126      	str	r6, [r4, #16]
 8004814:	6165      	str	r5, [r4, #20]
 8004816:	444e      	add	r6, r9
 8004818:	eba5 0509 	sub.w	r5, r5, r9
 800481c:	6026      	str	r6, [r4, #0]
 800481e:	60a5      	str	r5, [r4, #8]
 8004820:	463e      	mov	r6, r7
 8004822:	42be      	cmp	r6, r7
 8004824:	d900      	bls.n	8004828 <__ssputs_r+0x70>
 8004826:	463e      	mov	r6, r7
 8004828:	6820      	ldr	r0, [r4, #0]
 800482a:	4632      	mov	r2, r6
 800482c:	4641      	mov	r1, r8
 800482e:	f000 faab 	bl	8004d88 <memmove>
 8004832:	68a3      	ldr	r3, [r4, #8]
 8004834:	1b9b      	subs	r3, r3, r6
 8004836:	60a3      	str	r3, [r4, #8]
 8004838:	6823      	ldr	r3, [r4, #0]
 800483a:	4433      	add	r3, r6
 800483c:	6023      	str	r3, [r4, #0]
 800483e:	2000      	movs	r0, #0
 8004840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004844:	462a      	mov	r2, r5
 8004846:	f000 fad7 	bl	8004df8 <_realloc_r>
 800484a:	4606      	mov	r6, r0
 800484c:	2800      	cmp	r0, #0
 800484e:	d1e0      	bne.n	8004812 <__ssputs_r+0x5a>
 8004850:	6921      	ldr	r1, [r4, #16]
 8004852:	4650      	mov	r0, sl
 8004854:	f7ff feb8 	bl	80045c8 <_free_r>
 8004858:	230c      	movs	r3, #12
 800485a:	f8ca 3000 	str.w	r3, [sl]
 800485e:	89a3      	ldrh	r3, [r4, #12]
 8004860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004864:	81a3      	strh	r3, [r4, #12]
 8004866:	f04f 30ff 	mov.w	r0, #4294967295
 800486a:	e7e9      	b.n	8004840 <__ssputs_r+0x88>

0800486c <_svfiprintf_r>:
 800486c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004870:	4698      	mov	r8, r3
 8004872:	898b      	ldrh	r3, [r1, #12]
 8004874:	061b      	lsls	r3, r3, #24
 8004876:	b09d      	sub	sp, #116	; 0x74
 8004878:	4607      	mov	r7, r0
 800487a:	460d      	mov	r5, r1
 800487c:	4614      	mov	r4, r2
 800487e:	d50e      	bpl.n	800489e <_svfiprintf_r+0x32>
 8004880:	690b      	ldr	r3, [r1, #16]
 8004882:	b963      	cbnz	r3, 800489e <_svfiprintf_r+0x32>
 8004884:	2140      	movs	r1, #64	; 0x40
 8004886:	f7ff ff0b 	bl	80046a0 <_malloc_r>
 800488a:	6028      	str	r0, [r5, #0]
 800488c:	6128      	str	r0, [r5, #16]
 800488e:	b920      	cbnz	r0, 800489a <_svfiprintf_r+0x2e>
 8004890:	230c      	movs	r3, #12
 8004892:	603b      	str	r3, [r7, #0]
 8004894:	f04f 30ff 	mov.w	r0, #4294967295
 8004898:	e0d0      	b.n	8004a3c <_svfiprintf_r+0x1d0>
 800489a:	2340      	movs	r3, #64	; 0x40
 800489c:	616b      	str	r3, [r5, #20]
 800489e:	2300      	movs	r3, #0
 80048a0:	9309      	str	r3, [sp, #36]	; 0x24
 80048a2:	2320      	movs	r3, #32
 80048a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80048ac:	2330      	movs	r3, #48	; 0x30
 80048ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004a54 <_svfiprintf_r+0x1e8>
 80048b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048b6:	f04f 0901 	mov.w	r9, #1
 80048ba:	4623      	mov	r3, r4
 80048bc:	469a      	mov	sl, r3
 80048be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048c2:	b10a      	cbz	r2, 80048c8 <_svfiprintf_r+0x5c>
 80048c4:	2a25      	cmp	r2, #37	; 0x25
 80048c6:	d1f9      	bne.n	80048bc <_svfiprintf_r+0x50>
 80048c8:	ebba 0b04 	subs.w	fp, sl, r4
 80048cc:	d00b      	beq.n	80048e6 <_svfiprintf_r+0x7a>
 80048ce:	465b      	mov	r3, fp
 80048d0:	4622      	mov	r2, r4
 80048d2:	4629      	mov	r1, r5
 80048d4:	4638      	mov	r0, r7
 80048d6:	f7ff ff6f 	bl	80047b8 <__ssputs_r>
 80048da:	3001      	adds	r0, #1
 80048dc:	f000 80a9 	beq.w	8004a32 <_svfiprintf_r+0x1c6>
 80048e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048e2:	445a      	add	r2, fp
 80048e4:	9209      	str	r2, [sp, #36]	; 0x24
 80048e6:	f89a 3000 	ldrb.w	r3, [sl]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 80a1 	beq.w	8004a32 <_svfiprintf_r+0x1c6>
 80048f0:	2300      	movs	r3, #0
 80048f2:	f04f 32ff 	mov.w	r2, #4294967295
 80048f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048fa:	f10a 0a01 	add.w	sl, sl, #1
 80048fe:	9304      	str	r3, [sp, #16]
 8004900:	9307      	str	r3, [sp, #28]
 8004902:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004906:	931a      	str	r3, [sp, #104]	; 0x68
 8004908:	4654      	mov	r4, sl
 800490a:	2205      	movs	r2, #5
 800490c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004910:	4850      	ldr	r0, [pc, #320]	; (8004a54 <_svfiprintf_r+0x1e8>)
 8004912:	f7fb fc5d 	bl	80001d0 <memchr>
 8004916:	9a04      	ldr	r2, [sp, #16]
 8004918:	b9d8      	cbnz	r0, 8004952 <_svfiprintf_r+0xe6>
 800491a:	06d0      	lsls	r0, r2, #27
 800491c:	bf44      	itt	mi
 800491e:	2320      	movmi	r3, #32
 8004920:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004924:	0711      	lsls	r1, r2, #28
 8004926:	bf44      	itt	mi
 8004928:	232b      	movmi	r3, #43	; 0x2b
 800492a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800492e:	f89a 3000 	ldrb.w	r3, [sl]
 8004932:	2b2a      	cmp	r3, #42	; 0x2a
 8004934:	d015      	beq.n	8004962 <_svfiprintf_r+0xf6>
 8004936:	9a07      	ldr	r2, [sp, #28]
 8004938:	4654      	mov	r4, sl
 800493a:	2000      	movs	r0, #0
 800493c:	f04f 0c0a 	mov.w	ip, #10
 8004940:	4621      	mov	r1, r4
 8004942:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004946:	3b30      	subs	r3, #48	; 0x30
 8004948:	2b09      	cmp	r3, #9
 800494a:	d94d      	bls.n	80049e8 <_svfiprintf_r+0x17c>
 800494c:	b1b0      	cbz	r0, 800497c <_svfiprintf_r+0x110>
 800494e:	9207      	str	r2, [sp, #28]
 8004950:	e014      	b.n	800497c <_svfiprintf_r+0x110>
 8004952:	eba0 0308 	sub.w	r3, r0, r8
 8004956:	fa09 f303 	lsl.w	r3, r9, r3
 800495a:	4313      	orrs	r3, r2
 800495c:	9304      	str	r3, [sp, #16]
 800495e:	46a2      	mov	sl, r4
 8004960:	e7d2      	b.n	8004908 <_svfiprintf_r+0x9c>
 8004962:	9b03      	ldr	r3, [sp, #12]
 8004964:	1d19      	adds	r1, r3, #4
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	9103      	str	r1, [sp, #12]
 800496a:	2b00      	cmp	r3, #0
 800496c:	bfbb      	ittet	lt
 800496e:	425b      	neglt	r3, r3
 8004970:	f042 0202 	orrlt.w	r2, r2, #2
 8004974:	9307      	strge	r3, [sp, #28]
 8004976:	9307      	strlt	r3, [sp, #28]
 8004978:	bfb8      	it	lt
 800497a:	9204      	strlt	r2, [sp, #16]
 800497c:	7823      	ldrb	r3, [r4, #0]
 800497e:	2b2e      	cmp	r3, #46	; 0x2e
 8004980:	d10c      	bne.n	800499c <_svfiprintf_r+0x130>
 8004982:	7863      	ldrb	r3, [r4, #1]
 8004984:	2b2a      	cmp	r3, #42	; 0x2a
 8004986:	d134      	bne.n	80049f2 <_svfiprintf_r+0x186>
 8004988:	9b03      	ldr	r3, [sp, #12]
 800498a:	1d1a      	adds	r2, r3, #4
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	9203      	str	r2, [sp, #12]
 8004990:	2b00      	cmp	r3, #0
 8004992:	bfb8      	it	lt
 8004994:	f04f 33ff 	movlt.w	r3, #4294967295
 8004998:	3402      	adds	r4, #2
 800499a:	9305      	str	r3, [sp, #20]
 800499c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004a64 <_svfiprintf_r+0x1f8>
 80049a0:	7821      	ldrb	r1, [r4, #0]
 80049a2:	2203      	movs	r2, #3
 80049a4:	4650      	mov	r0, sl
 80049a6:	f7fb fc13 	bl	80001d0 <memchr>
 80049aa:	b138      	cbz	r0, 80049bc <_svfiprintf_r+0x150>
 80049ac:	9b04      	ldr	r3, [sp, #16]
 80049ae:	eba0 000a 	sub.w	r0, r0, sl
 80049b2:	2240      	movs	r2, #64	; 0x40
 80049b4:	4082      	lsls	r2, r0
 80049b6:	4313      	orrs	r3, r2
 80049b8:	3401      	adds	r4, #1
 80049ba:	9304      	str	r3, [sp, #16]
 80049bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049c0:	4825      	ldr	r0, [pc, #148]	; (8004a58 <_svfiprintf_r+0x1ec>)
 80049c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049c6:	2206      	movs	r2, #6
 80049c8:	f7fb fc02 	bl	80001d0 <memchr>
 80049cc:	2800      	cmp	r0, #0
 80049ce:	d038      	beq.n	8004a42 <_svfiprintf_r+0x1d6>
 80049d0:	4b22      	ldr	r3, [pc, #136]	; (8004a5c <_svfiprintf_r+0x1f0>)
 80049d2:	bb1b      	cbnz	r3, 8004a1c <_svfiprintf_r+0x1b0>
 80049d4:	9b03      	ldr	r3, [sp, #12]
 80049d6:	3307      	adds	r3, #7
 80049d8:	f023 0307 	bic.w	r3, r3, #7
 80049dc:	3308      	adds	r3, #8
 80049de:	9303      	str	r3, [sp, #12]
 80049e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049e2:	4433      	add	r3, r6
 80049e4:	9309      	str	r3, [sp, #36]	; 0x24
 80049e6:	e768      	b.n	80048ba <_svfiprintf_r+0x4e>
 80049e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80049ec:	460c      	mov	r4, r1
 80049ee:	2001      	movs	r0, #1
 80049f0:	e7a6      	b.n	8004940 <_svfiprintf_r+0xd4>
 80049f2:	2300      	movs	r3, #0
 80049f4:	3401      	adds	r4, #1
 80049f6:	9305      	str	r3, [sp, #20]
 80049f8:	4619      	mov	r1, r3
 80049fa:	f04f 0c0a 	mov.w	ip, #10
 80049fe:	4620      	mov	r0, r4
 8004a00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a04:	3a30      	subs	r2, #48	; 0x30
 8004a06:	2a09      	cmp	r2, #9
 8004a08:	d903      	bls.n	8004a12 <_svfiprintf_r+0x1a6>
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0c6      	beq.n	800499c <_svfiprintf_r+0x130>
 8004a0e:	9105      	str	r1, [sp, #20]
 8004a10:	e7c4      	b.n	800499c <_svfiprintf_r+0x130>
 8004a12:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a16:	4604      	mov	r4, r0
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e7f0      	b.n	80049fe <_svfiprintf_r+0x192>
 8004a1c:	ab03      	add	r3, sp, #12
 8004a1e:	9300      	str	r3, [sp, #0]
 8004a20:	462a      	mov	r2, r5
 8004a22:	4b0f      	ldr	r3, [pc, #60]	; (8004a60 <_svfiprintf_r+0x1f4>)
 8004a24:	a904      	add	r1, sp, #16
 8004a26:	4638      	mov	r0, r7
 8004a28:	f3af 8000 	nop.w
 8004a2c:	1c42      	adds	r2, r0, #1
 8004a2e:	4606      	mov	r6, r0
 8004a30:	d1d6      	bne.n	80049e0 <_svfiprintf_r+0x174>
 8004a32:	89ab      	ldrh	r3, [r5, #12]
 8004a34:	065b      	lsls	r3, r3, #25
 8004a36:	f53f af2d 	bmi.w	8004894 <_svfiprintf_r+0x28>
 8004a3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a3c:	b01d      	add	sp, #116	; 0x74
 8004a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a42:	ab03      	add	r3, sp, #12
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	462a      	mov	r2, r5
 8004a48:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <_svfiprintf_r+0x1f4>)
 8004a4a:	a904      	add	r1, sp, #16
 8004a4c:	4638      	mov	r0, r7
 8004a4e:	f000 f879 	bl	8004b44 <_printf_i>
 8004a52:	e7eb      	b.n	8004a2c <_svfiprintf_r+0x1c0>
 8004a54:	08006f6c 	.word	0x08006f6c
 8004a58:	08006f76 	.word	0x08006f76
 8004a5c:	00000000 	.word	0x00000000
 8004a60:	080047b9 	.word	0x080047b9
 8004a64:	08006f72 	.word	0x08006f72

08004a68 <_printf_common>:
 8004a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a6c:	4616      	mov	r6, r2
 8004a6e:	4699      	mov	r9, r3
 8004a70:	688a      	ldr	r2, [r1, #8]
 8004a72:	690b      	ldr	r3, [r1, #16]
 8004a74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	bfb8      	it	lt
 8004a7c:	4613      	movlt	r3, r2
 8004a7e:	6033      	str	r3, [r6, #0]
 8004a80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a84:	4607      	mov	r7, r0
 8004a86:	460c      	mov	r4, r1
 8004a88:	b10a      	cbz	r2, 8004a8e <_printf_common+0x26>
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	6033      	str	r3, [r6, #0]
 8004a8e:	6823      	ldr	r3, [r4, #0]
 8004a90:	0699      	lsls	r1, r3, #26
 8004a92:	bf42      	ittt	mi
 8004a94:	6833      	ldrmi	r3, [r6, #0]
 8004a96:	3302      	addmi	r3, #2
 8004a98:	6033      	strmi	r3, [r6, #0]
 8004a9a:	6825      	ldr	r5, [r4, #0]
 8004a9c:	f015 0506 	ands.w	r5, r5, #6
 8004aa0:	d106      	bne.n	8004ab0 <_printf_common+0x48>
 8004aa2:	f104 0a19 	add.w	sl, r4, #25
 8004aa6:	68e3      	ldr	r3, [r4, #12]
 8004aa8:	6832      	ldr	r2, [r6, #0]
 8004aaa:	1a9b      	subs	r3, r3, r2
 8004aac:	42ab      	cmp	r3, r5
 8004aae:	dc26      	bgt.n	8004afe <_printf_common+0x96>
 8004ab0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ab4:	1e13      	subs	r3, r2, #0
 8004ab6:	6822      	ldr	r2, [r4, #0]
 8004ab8:	bf18      	it	ne
 8004aba:	2301      	movne	r3, #1
 8004abc:	0692      	lsls	r2, r2, #26
 8004abe:	d42b      	bmi.n	8004b18 <_printf_common+0xb0>
 8004ac0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ac4:	4649      	mov	r1, r9
 8004ac6:	4638      	mov	r0, r7
 8004ac8:	47c0      	blx	r8
 8004aca:	3001      	adds	r0, #1
 8004acc:	d01e      	beq.n	8004b0c <_printf_common+0xa4>
 8004ace:	6823      	ldr	r3, [r4, #0]
 8004ad0:	6922      	ldr	r2, [r4, #16]
 8004ad2:	f003 0306 	and.w	r3, r3, #6
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	bf02      	ittt	eq
 8004ada:	68e5      	ldreq	r5, [r4, #12]
 8004adc:	6833      	ldreq	r3, [r6, #0]
 8004ade:	1aed      	subeq	r5, r5, r3
 8004ae0:	68a3      	ldr	r3, [r4, #8]
 8004ae2:	bf0c      	ite	eq
 8004ae4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ae8:	2500      	movne	r5, #0
 8004aea:	4293      	cmp	r3, r2
 8004aec:	bfc4      	itt	gt
 8004aee:	1a9b      	subgt	r3, r3, r2
 8004af0:	18ed      	addgt	r5, r5, r3
 8004af2:	2600      	movs	r6, #0
 8004af4:	341a      	adds	r4, #26
 8004af6:	42b5      	cmp	r5, r6
 8004af8:	d11a      	bne.n	8004b30 <_printf_common+0xc8>
 8004afa:	2000      	movs	r0, #0
 8004afc:	e008      	b.n	8004b10 <_printf_common+0xa8>
 8004afe:	2301      	movs	r3, #1
 8004b00:	4652      	mov	r2, sl
 8004b02:	4649      	mov	r1, r9
 8004b04:	4638      	mov	r0, r7
 8004b06:	47c0      	blx	r8
 8004b08:	3001      	adds	r0, #1
 8004b0a:	d103      	bne.n	8004b14 <_printf_common+0xac>
 8004b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b14:	3501      	adds	r5, #1
 8004b16:	e7c6      	b.n	8004aa6 <_printf_common+0x3e>
 8004b18:	18e1      	adds	r1, r4, r3
 8004b1a:	1c5a      	adds	r2, r3, #1
 8004b1c:	2030      	movs	r0, #48	; 0x30
 8004b1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b22:	4422      	add	r2, r4
 8004b24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b2c:	3302      	adds	r3, #2
 8004b2e:	e7c7      	b.n	8004ac0 <_printf_common+0x58>
 8004b30:	2301      	movs	r3, #1
 8004b32:	4622      	mov	r2, r4
 8004b34:	4649      	mov	r1, r9
 8004b36:	4638      	mov	r0, r7
 8004b38:	47c0      	blx	r8
 8004b3a:	3001      	adds	r0, #1
 8004b3c:	d0e6      	beq.n	8004b0c <_printf_common+0xa4>
 8004b3e:	3601      	adds	r6, #1
 8004b40:	e7d9      	b.n	8004af6 <_printf_common+0x8e>
	...

08004b44 <_printf_i>:
 8004b44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b48:	7e0f      	ldrb	r7, [r1, #24]
 8004b4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b4c:	2f78      	cmp	r7, #120	; 0x78
 8004b4e:	4691      	mov	r9, r2
 8004b50:	4680      	mov	r8, r0
 8004b52:	460c      	mov	r4, r1
 8004b54:	469a      	mov	sl, r3
 8004b56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b5a:	d807      	bhi.n	8004b6c <_printf_i+0x28>
 8004b5c:	2f62      	cmp	r7, #98	; 0x62
 8004b5e:	d80a      	bhi.n	8004b76 <_printf_i+0x32>
 8004b60:	2f00      	cmp	r7, #0
 8004b62:	f000 80d4 	beq.w	8004d0e <_printf_i+0x1ca>
 8004b66:	2f58      	cmp	r7, #88	; 0x58
 8004b68:	f000 80c0 	beq.w	8004cec <_printf_i+0x1a8>
 8004b6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b74:	e03a      	b.n	8004bec <_printf_i+0xa8>
 8004b76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b7a:	2b15      	cmp	r3, #21
 8004b7c:	d8f6      	bhi.n	8004b6c <_printf_i+0x28>
 8004b7e:	a101      	add	r1, pc, #4	; (adr r1, 8004b84 <_printf_i+0x40>)
 8004b80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b84:	08004bdd 	.word	0x08004bdd
 8004b88:	08004bf1 	.word	0x08004bf1
 8004b8c:	08004b6d 	.word	0x08004b6d
 8004b90:	08004b6d 	.word	0x08004b6d
 8004b94:	08004b6d 	.word	0x08004b6d
 8004b98:	08004b6d 	.word	0x08004b6d
 8004b9c:	08004bf1 	.word	0x08004bf1
 8004ba0:	08004b6d 	.word	0x08004b6d
 8004ba4:	08004b6d 	.word	0x08004b6d
 8004ba8:	08004b6d 	.word	0x08004b6d
 8004bac:	08004b6d 	.word	0x08004b6d
 8004bb0:	08004cf5 	.word	0x08004cf5
 8004bb4:	08004c1d 	.word	0x08004c1d
 8004bb8:	08004caf 	.word	0x08004caf
 8004bbc:	08004b6d 	.word	0x08004b6d
 8004bc0:	08004b6d 	.word	0x08004b6d
 8004bc4:	08004d17 	.word	0x08004d17
 8004bc8:	08004b6d 	.word	0x08004b6d
 8004bcc:	08004c1d 	.word	0x08004c1d
 8004bd0:	08004b6d 	.word	0x08004b6d
 8004bd4:	08004b6d 	.word	0x08004b6d
 8004bd8:	08004cb7 	.word	0x08004cb7
 8004bdc:	682b      	ldr	r3, [r5, #0]
 8004bde:	1d1a      	adds	r2, r3, #4
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	602a      	str	r2, [r5, #0]
 8004be4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004be8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bec:	2301      	movs	r3, #1
 8004bee:	e09f      	b.n	8004d30 <_printf_i+0x1ec>
 8004bf0:	6820      	ldr	r0, [r4, #0]
 8004bf2:	682b      	ldr	r3, [r5, #0]
 8004bf4:	0607      	lsls	r7, r0, #24
 8004bf6:	f103 0104 	add.w	r1, r3, #4
 8004bfa:	6029      	str	r1, [r5, #0]
 8004bfc:	d501      	bpl.n	8004c02 <_printf_i+0xbe>
 8004bfe:	681e      	ldr	r6, [r3, #0]
 8004c00:	e003      	b.n	8004c0a <_printf_i+0xc6>
 8004c02:	0646      	lsls	r6, r0, #25
 8004c04:	d5fb      	bpl.n	8004bfe <_printf_i+0xba>
 8004c06:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004c0a:	2e00      	cmp	r6, #0
 8004c0c:	da03      	bge.n	8004c16 <_printf_i+0xd2>
 8004c0e:	232d      	movs	r3, #45	; 0x2d
 8004c10:	4276      	negs	r6, r6
 8004c12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c16:	485a      	ldr	r0, [pc, #360]	; (8004d80 <_printf_i+0x23c>)
 8004c18:	230a      	movs	r3, #10
 8004c1a:	e012      	b.n	8004c42 <_printf_i+0xfe>
 8004c1c:	682b      	ldr	r3, [r5, #0]
 8004c1e:	6820      	ldr	r0, [r4, #0]
 8004c20:	1d19      	adds	r1, r3, #4
 8004c22:	6029      	str	r1, [r5, #0]
 8004c24:	0605      	lsls	r5, r0, #24
 8004c26:	d501      	bpl.n	8004c2c <_printf_i+0xe8>
 8004c28:	681e      	ldr	r6, [r3, #0]
 8004c2a:	e002      	b.n	8004c32 <_printf_i+0xee>
 8004c2c:	0641      	lsls	r1, r0, #25
 8004c2e:	d5fb      	bpl.n	8004c28 <_printf_i+0xe4>
 8004c30:	881e      	ldrh	r6, [r3, #0]
 8004c32:	4853      	ldr	r0, [pc, #332]	; (8004d80 <_printf_i+0x23c>)
 8004c34:	2f6f      	cmp	r7, #111	; 0x6f
 8004c36:	bf0c      	ite	eq
 8004c38:	2308      	moveq	r3, #8
 8004c3a:	230a      	movne	r3, #10
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c42:	6865      	ldr	r5, [r4, #4]
 8004c44:	60a5      	str	r5, [r4, #8]
 8004c46:	2d00      	cmp	r5, #0
 8004c48:	bfa2      	ittt	ge
 8004c4a:	6821      	ldrge	r1, [r4, #0]
 8004c4c:	f021 0104 	bicge.w	r1, r1, #4
 8004c50:	6021      	strge	r1, [r4, #0]
 8004c52:	b90e      	cbnz	r6, 8004c58 <_printf_i+0x114>
 8004c54:	2d00      	cmp	r5, #0
 8004c56:	d04b      	beq.n	8004cf0 <_printf_i+0x1ac>
 8004c58:	4615      	mov	r5, r2
 8004c5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c5e:	fb03 6711 	mls	r7, r3, r1, r6
 8004c62:	5dc7      	ldrb	r7, [r0, r7]
 8004c64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c68:	4637      	mov	r7, r6
 8004c6a:	42bb      	cmp	r3, r7
 8004c6c:	460e      	mov	r6, r1
 8004c6e:	d9f4      	bls.n	8004c5a <_printf_i+0x116>
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	d10b      	bne.n	8004c8c <_printf_i+0x148>
 8004c74:	6823      	ldr	r3, [r4, #0]
 8004c76:	07de      	lsls	r6, r3, #31
 8004c78:	d508      	bpl.n	8004c8c <_printf_i+0x148>
 8004c7a:	6923      	ldr	r3, [r4, #16]
 8004c7c:	6861      	ldr	r1, [r4, #4]
 8004c7e:	4299      	cmp	r1, r3
 8004c80:	bfde      	ittt	le
 8004c82:	2330      	movle	r3, #48	; 0x30
 8004c84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c8c:	1b52      	subs	r2, r2, r5
 8004c8e:	6122      	str	r2, [r4, #16]
 8004c90:	f8cd a000 	str.w	sl, [sp]
 8004c94:	464b      	mov	r3, r9
 8004c96:	aa03      	add	r2, sp, #12
 8004c98:	4621      	mov	r1, r4
 8004c9a:	4640      	mov	r0, r8
 8004c9c:	f7ff fee4 	bl	8004a68 <_printf_common>
 8004ca0:	3001      	adds	r0, #1
 8004ca2:	d14a      	bne.n	8004d3a <_printf_i+0x1f6>
 8004ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca8:	b004      	add	sp, #16
 8004caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cae:	6823      	ldr	r3, [r4, #0]
 8004cb0:	f043 0320 	orr.w	r3, r3, #32
 8004cb4:	6023      	str	r3, [r4, #0]
 8004cb6:	4833      	ldr	r0, [pc, #204]	; (8004d84 <_printf_i+0x240>)
 8004cb8:	2778      	movs	r7, #120	; 0x78
 8004cba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004cbe:	6823      	ldr	r3, [r4, #0]
 8004cc0:	6829      	ldr	r1, [r5, #0]
 8004cc2:	061f      	lsls	r7, r3, #24
 8004cc4:	f851 6b04 	ldr.w	r6, [r1], #4
 8004cc8:	d402      	bmi.n	8004cd0 <_printf_i+0x18c>
 8004cca:	065f      	lsls	r7, r3, #25
 8004ccc:	bf48      	it	mi
 8004cce:	b2b6      	uxthmi	r6, r6
 8004cd0:	07df      	lsls	r7, r3, #31
 8004cd2:	bf48      	it	mi
 8004cd4:	f043 0320 	orrmi.w	r3, r3, #32
 8004cd8:	6029      	str	r1, [r5, #0]
 8004cda:	bf48      	it	mi
 8004cdc:	6023      	strmi	r3, [r4, #0]
 8004cde:	b91e      	cbnz	r6, 8004ce8 <_printf_i+0x1a4>
 8004ce0:	6823      	ldr	r3, [r4, #0]
 8004ce2:	f023 0320 	bic.w	r3, r3, #32
 8004ce6:	6023      	str	r3, [r4, #0]
 8004ce8:	2310      	movs	r3, #16
 8004cea:	e7a7      	b.n	8004c3c <_printf_i+0xf8>
 8004cec:	4824      	ldr	r0, [pc, #144]	; (8004d80 <_printf_i+0x23c>)
 8004cee:	e7e4      	b.n	8004cba <_printf_i+0x176>
 8004cf0:	4615      	mov	r5, r2
 8004cf2:	e7bd      	b.n	8004c70 <_printf_i+0x12c>
 8004cf4:	682b      	ldr	r3, [r5, #0]
 8004cf6:	6826      	ldr	r6, [r4, #0]
 8004cf8:	6961      	ldr	r1, [r4, #20]
 8004cfa:	1d18      	adds	r0, r3, #4
 8004cfc:	6028      	str	r0, [r5, #0]
 8004cfe:	0635      	lsls	r5, r6, #24
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	d501      	bpl.n	8004d08 <_printf_i+0x1c4>
 8004d04:	6019      	str	r1, [r3, #0]
 8004d06:	e002      	b.n	8004d0e <_printf_i+0x1ca>
 8004d08:	0670      	lsls	r0, r6, #25
 8004d0a:	d5fb      	bpl.n	8004d04 <_printf_i+0x1c0>
 8004d0c:	8019      	strh	r1, [r3, #0]
 8004d0e:	2300      	movs	r3, #0
 8004d10:	6123      	str	r3, [r4, #16]
 8004d12:	4615      	mov	r5, r2
 8004d14:	e7bc      	b.n	8004c90 <_printf_i+0x14c>
 8004d16:	682b      	ldr	r3, [r5, #0]
 8004d18:	1d1a      	adds	r2, r3, #4
 8004d1a:	602a      	str	r2, [r5, #0]
 8004d1c:	681d      	ldr	r5, [r3, #0]
 8004d1e:	6862      	ldr	r2, [r4, #4]
 8004d20:	2100      	movs	r1, #0
 8004d22:	4628      	mov	r0, r5
 8004d24:	f7fb fa54 	bl	80001d0 <memchr>
 8004d28:	b108      	cbz	r0, 8004d2e <_printf_i+0x1ea>
 8004d2a:	1b40      	subs	r0, r0, r5
 8004d2c:	6060      	str	r0, [r4, #4]
 8004d2e:	6863      	ldr	r3, [r4, #4]
 8004d30:	6123      	str	r3, [r4, #16]
 8004d32:	2300      	movs	r3, #0
 8004d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d38:	e7aa      	b.n	8004c90 <_printf_i+0x14c>
 8004d3a:	6923      	ldr	r3, [r4, #16]
 8004d3c:	462a      	mov	r2, r5
 8004d3e:	4649      	mov	r1, r9
 8004d40:	4640      	mov	r0, r8
 8004d42:	47d0      	blx	sl
 8004d44:	3001      	adds	r0, #1
 8004d46:	d0ad      	beq.n	8004ca4 <_printf_i+0x160>
 8004d48:	6823      	ldr	r3, [r4, #0]
 8004d4a:	079b      	lsls	r3, r3, #30
 8004d4c:	d413      	bmi.n	8004d76 <_printf_i+0x232>
 8004d4e:	68e0      	ldr	r0, [r4, #12]
 8004d50:	9b03      	ldr	r3, [sp, #12]
 8004d52:	4298      	cmp	r0, r3
 8004d54:	bfb8      	it	lt
 8004d56:	4618      	movlt	r0, r3
 8004d58:	e7a6      	b.n	8004ca8 <_printf_i+0x164>
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	4632      	mov	r2, r6
 8004d5e:	4649      	mov	r1, r9
 8004d60:	4640      	mov	r0, r8
 8004d62:	47d0      	blx	sl
 8004d64:	3001      	adds	r0, #1
 8004d66:	d09d      	beq.n	8004ca4 <_printf_i+0x160>
 8004d68:	3501      	adds	r5, #1
 8004d6a:	68e3      	ldr	r3, [r4, #12]
 8004d6c:	9903      	ldr	r1, [sp, #12]
 8004d6e:	1a5b      	subs	r3, r3, r1
 8004d70:	42ab      	cmp	r3, r5
 8004d72:	dcf2      	bgt.n	8004d5a <_printf_i+0x216>
 8004d74:	e7eb      	b.n	8004d4e <_printf_i+0x20a>
 8004d76:	2500      	movs	r5, #0
 8004d78:	f104 0619 	add.w	r6, r4, #25
 8004d7c:	e7f5      	b.n	8004d6a <_printf_i+0x226>
 8004d7e:	bf00      	nop
 8004d80:	08006f7d 	.word	0x08006f7d
 8004d84:	08006f8e 	.word	0x08006f8e

08004d88 <memmove>:
 8004d88:	4288      	cmp	r0, r1
 8004d8a:	b510      	push	{r4, lr}
 8004d8c:	eb01 0402 	add.w	r4, r1, r2
 8004d90:	d902      	bls.n	8004d98 <memmove+0x10>
 8004d92:	4284      	cmp	r4, r0
 8004d94:	4623      	mov	r3, r4
 8004d96:	d807      	bhi.n	8004da8 <memmove+0x20>
 8004d98:	1e43      	subs	r3, r0, #1
 8004d9a:	42a1      	cmp	r1, r4
 8004d9c:	d008      	beq.n	8004db0 <memmove+0x28>
 8004d9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004da2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004da6:	e7f8      	b.n	8004d9a <memmove+0x12>
 8004da8:	4402      	add	r2, r0
 8004daa:	4601      	mov	r1, r0
 8004dac:	428a      	cmp	r2, r1
 8004dae:	d100      	bne.n	8004db2 <memmove+0x2a>
 8004db0:	bd10      	pop	{r4, pc}
 8004db2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004db6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004dba:	e7f7      	b.n	8004dac <memmove+0x24>

08004dbc <_sbrk_r>:
 8004dbc:	b538      	push	{r3, r4, r5, lr}
 8004dbe:	4d06      	ldr	r5, [pc, #24]	; (8004dd8 <_sbrk_r+0x1c>)
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	4604      	mov	r4, r0
 8004dc4:	4608      	mov	r0, r1
 8004dc6:	602b      	str	r3, [r5, #0]
 8004dc8:	f7fc fbe8 	bl	800159c <_sbrk>
 8004dcc:	1c43      	adds	r3, r0, #1
 8004dce:	d102      	bne.n	8004dd6 <_sbrk_r+0x1a>
 8004dd0:	682b      	ldr	r3, [r5, #0]
 8004dd2:	b103      	cbz	r3, 8004dd6 <_sbrk_r+0x1a>
 8004dd4:	6023      	str	r3, [r4, #0]
 8004dd6:	bd38      	pop	{r3, r4, r5, pc}
 8004dd8:	20000690 	.word	0x20000690

08004ddc <memcpy>:
 8004ddc:	440a      	add	r2, r1
 8004dde:	4291      	cmp	r1, r2
 8004de0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004de4:	d100      	bne.n	8004de8 <memcpy+0xc>
 8004de6:	4770      	bx	lr
 8004de8:	b510      	push	{r4, lr}
 8004dea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004df2:	4291      	cmp	r1, r2
 8004df4:	d1f9      	bne.n	8004dea <memcpy+0xe>
 8004df6:	bd10      	pop	{r4, pc}

08004df8 <_realloc_r>:
 8004df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dfc:	4680      	mov	r8, r0
 8004dfe:	4614      	mov	r4, r2
 8004e00:	460e      	mov	r6, r1
 8004e02:	b921      	cbnz	r1, 8004e0e <_realloc_r+0x16>
 8004e04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e08:	4611      	mov	r1, r2
 8004e0a:	f7ff bc49 	b.w	80046a0 <_malloc_r>
 8004e0e:	b92a      	cbnz	r2, 8004e1c <_realloc_r+0x24>
 8004e10:	f7ff fbda 	bl	80045c8 <_free_r>
 8004e14:	4625      	mov	r5, r4
 8004e16:	4628      	mov	r0, r5
 8004e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e1c:	f000 f81b 	bl	8004e56 <_malloc_usable_size_r>
 8004e20:	4284      	cmp	r4, r0
 8004e22:	4607      	mov	r7, r0
 8004e24:	d802      	bhi.n	8004e2c <_realloc_r+0x34>
 8004e26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004e2a:	d812      	bhi.n	8004e52 <_realloc_r+0x5a>
 8004e2c:	4621      	mov	r1, r4
 8004e2e:	4640      	mov	r0, r8
 8004e30:	f7ff fc36 	bl	80046a0 <_malloc_r>
 8004e34:	4605      	mov	r5, r0
 8004e36:	2800      	cmp	r0, #0
 8004e38:	d0ed      	beq.n	8004e16 <_realloc_r+0x1e>
 8004e3a:	42bc      	cmp	r4, r7
 8004e3c:	4622      	mov	r2, r4
 8004e3e:	4631      	mov	r1, r6
 8004e40:	bf28      	it	cs
 8004e42:	463a      	movcs	r2, r7
 8004e44:	f7ff ffca 	bl	8004ddc <memcpy>
 8004e48:	4631      	mov	r1, r6
 8004e4a:	4640      	mov	r0, r8
 8004e4c:	f7ff fbbc 	bl	80045c8 <_free_r>
 8004e50:	e7e1      	b.n	8004e16 <_realloc_r+0x1e>
 8004e52:	4635      	mov	r5, r6
 8004e54:	e7df      	b.n	8004e16 <_realloc_r+0x1e>

08004e56 <_malloc_usable_size_r>:
 8004e56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e5a:	1f18      	subs	r0, r3, #4
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	bfbc      	itt	lt
 8004e60:	580b      	ldrlt	r3, [r1, r0]
 8004e62:	18c0      	addlt	r0, r0, r3
 8004e64:	4770      	bx	lr
	...

08004e68 <_init>:
 8004e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e6a:	bf00      	nop
 8004e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e6e:	bc08      	pop	{r3}
 8004e70:	469e      	mov	lr, r3
 8004e72:	4770      	bx	lr

08004e74 <_fini>:
 8004e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e76:	bf00      	nop
 8004e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e7a:	bc08      	pop	{r3}
 8004e7c:	469e      	mov	lr, r3
 8004e7e:	4770      	bx	lr
